"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2618],{655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"developer-tools/merobox/testing-integration-examples","title":"Testing Integration Examples","description":"Examples of integrating Merobox with testing frameworks using subprocess calls.","source":"@site/docs/05-developer-tools/merobox/testing-integration-examples.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/testing-integration-examples","permalink":"/developer-tools/merobox/testing-integration-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/testing-integration-examples.mdx","tags":[],"version":"current","lastUpdatedAt":1759748683000,"sidebarPosition":4.3,"frontMatter":{"title":"Testing Integration Examples","description":"Examples of integrating Merobox with testing frameworks using subprocess calls.","sidebar_position":4.3},"sidebar":"tutorialSidebar","previous":{"title":"Real-World Examples","permalink":"/developer-tools/merobox/real-world-examples"},"next":{"title":"Advanced Examples","permalink":"/developer-tools/merobox/advanced-examples"}}');var r=t(86070),o=t(83545);const l={title:"Testing Integration Examples",description:"Examples of integrating Merobox with testing frameworks using subprocess calls.",sidebar_position:4.3},i="Testing Integration Examples",a={},p=[{value:"Example 1: Python Testing with Merobox",id:"example-1-python-testing-with-merobox",level:2},{value:"Basic Test Setup",id:"basic-test-setup",level:3},{value:"Example 2: CI/CD Pipeline Integration",id:"example-2-cicd-pipeline-integration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Example 3: Docker-based Testing",id:"example-3-docker-based-testing",level:2},{value:"Dockerfile for Testing",id:"dockerfile-for-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Resource Management",id:"1-resource-management",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Parallel Testing",id:"3-parallel-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing-integration-examples",children:"Testing Integration Examples"})}),"\n",(0,r.jsx)(n.p,{children:"These examples show how to integrate Merobox with popular testing frameworks\nusing subprocess calls for automated testing."}),"\n",(0,r.jsx)(n.h2,{id:"example-1-python-testing-with-merobox",children:"Example 1: Python Testing with Merobox"}),"\n",(0,r.jsx)(n.p,{children:"Use Merobox in your Python test suite with subprocess calls."}),"\n",(0,r.jsx)(n.h3,{id:"basic-test-setup",children:"Basic Test Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# test_my_app.py\nimport pytest\nimport subprocess\nimport time\nimport tempfile\nimport os\n\nclass MeroboxTestHelper:\n    def __init__(self):\n        self.nodes = []\n        self.workflow_files = []\n\n    def start_nodes(self, count=2, prefix=\"test\"):\n        \"\"\"Start Merobox nodes for testing.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'run', '--count', str(count), '--prefix', prefix],\n            capture_output=True,\n            text=True\n        )\n        if result.returncode == 0:\n            self.nodes = [f\"{prefix}-{i+1}\" for i in range(count)]\n            time.sleep(10)  # Wait for nodes to start\n            return True\n        return False\n\n    def stop_nodes(self):\n        \"\"\"Stop all test nodes.\"\"\"\n        subprocess.run(['merobox', 'stop', '--all'])\n        self.nodes = []\n\n    def check_health(self):\n        \"\"\"Check health of all nodes.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'health'],\n            capture_output=True,\n            text=True\n        )\n        return result.returncode == 0\n\n    def create_workflow(self, workflow_config):\n        \"\"\"Create a temporary workflow file.\"\"\"\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.yml', delete=False) as f:\n            import yaml\n            yaml.dump(workflow_config, f)\n            self.workflow_files.append(f.name)\n            return f.name\n\n    def run_workflow(self, workflow_file):\n        \"\"\"Run a Merobox workflow.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'bootstrap', 'run', workflow_file],\n            capture_output=True,\n            text=True\n        )\n        return result\n\n    def cleanup(self):\n        \"\"\"Clean up all resources.\"\"\"\n        self.stop_nodes()\n        for file in self.workflow_files:\n            if os.path.exists(file):\n                os.unlink(file)\n        self.workflow_files = []\n\n@pytest.fixture(scope=\"function\")\ndef merobox_helper():\n    \"\"\"Create a Merobox test helper for each test.\"\"\"\n    helper = MeroboxTestHelper()\n    yield helper\n    helper.cleanup()\n\ndef test_basic_functionality(merobox_helper):\n    \"\"\"Test basic Merobox functionality.\"\"\"\n    assert merobox_helper.start_nodes(2)\n    assert merobox_helper.check_health()\n\n    # Test basic operations\n    result = subprocess.run(['merobox', 'list'], capture_output=True, text=True)\n    assert result.returncode == 0\n    assert \"test-1\" in result.stdout\n\ndef test_workflow_execution(merobox_helper):\n    \"\"\"Test workflow execution.\"\"\"\n    workflow_config = {\n        'description': 'Test workflow',\n        'name': 'Test Workflow',\n        'nodes': {\n            'chain_id': 'testnet-1',\n            'count': 1,\n            'image': 'ghcr.io/calimero-network/merod:edge'\n        },\n        'steps': [\n            {\n                'name': 'Test Step',\n                'type': 'script',\n                'script': 'echo \"Hello from test workflow\"'\n            }\n        ],\n        'stop_all_nodes': True\n    }\n\n    workflow_file = merobox_helper.create_workflow(workflow_config)\n    result = merobox_helper.run_workflow(workflow_file)\n    assert result.returncode == 0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-2-cicd-pipeline-integration",children:"Example 2: CI/CD Pipeline Integration"}),"\n",(0,r.jsx)(n.p,{children:"Integrate Merobox into CI/CD pipelines."}),"\n",(0,r.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test with Merobox\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install merobox\n\n      - name: Start Merobox nodes\n        run: |\n          merobox run --count 2\n          sleep 10\n          merobox health\n\n      - name: Run tests\n        run: |\n          pytest tests/ -v\n\n      - name: Cleanup\n        if: always()\n        run: |\n          merobox stop --all\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .gitlab-ci.yml\nstages:\n  - test\n\ntest:\n  stage: test\n  image: python:3.9\n  before_script:\n    - pip install -r requirements.txt\n    - pip install merobox\n  script:\n    - merobox run --count 2\n    - sleep 10\n    - merobox health\n    - pytest tests/ -v\n  after_script:\n    - merobox stop --all\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-3-docker-based-testing",children:"Example 3: Docker-based Testing"}),"\n",(0,r.jsx)(n.p,{children:"Use Docker for isolated testing environments."}),"\n",(0,r.jsx)(n.h3,{id:"dockerfile-for-testing",children:"Dockerfile for Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile.test\nFROM python:3.9\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    docker.io \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nRUN pip install merobox\n\n# Copy test files\nCOPY tests/ /app/tests/\nCOPY . /app/\n\nWORKDIR /app\n\n# Run tests\nCMD ["pytest", "tests/", "-v"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-resource-management",children:"1. Resource Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Always clean up resources\ndef test_with_cleanup():\n    helper = MeroboxTestHelper()\n    try:\n        helper.start_nodes(2)\n        # Run tests\n        assert helper.check_health()\n    finally:\n        helper.cleanup()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Handle errors gracefully\ndef test_with_error_handling():\n    helper = MeroboxTestHelper()\n    try:\n        result = helper.start_nodes(2)\n        if not result:\n            pytest.skip("Failed to start nodes")\n        # Continue with test\n    except Exception as e:\n        pytest.fail(f"Test failed: {e}")\n    finally:\n        helper.cleanup()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-parallel-testing",children:"3. Parallel Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Use different prefixes for parallel tests\ndef test_parallel_1():\n    helper = MeroboxTestHelper()\n    helper.start_nodes(1, prefix="test1")\n    # Run test\n    helper.cleanup()\n\ndef test_parallel_2():\n    helper = MeroboxTestHelper()\n    helper.start_nodes(1, prefix="test2")\n    # Run test\n    helper.cleanup()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand testing integration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},83545:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(30758);const r={},o=s.createContext(r);function l(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);