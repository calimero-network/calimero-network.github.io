"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2085],{59100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"developer-tools/merobox/workflow-advanced-features","title":"Workflow Advanced Features","description":"Advanced workflow features including parallel steps and custom scripts.","source":"@site/docs/05-developer-tools/merobox/workflow-advanced-features.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/workflow-advanced-features","permalink":"/developer-tools/merobox/workflow-advanced-features","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/workflow-advanced-features.mdx","tags":[],"version":"current","lastUpdatedAt":1759748683000,"sidebarPosition":7.5,"frontMatter":{"title":"Workflow Advanced Features","description":"Advanced workflow features including parallel steps and custom scripts.","sidebar_position":7.5},"sidebar":"tutorialSidebar","previous":{"title":"Authentication Service Integration","permalink":"/developer-tools/merobox/auth-service-integration"},"next":{"title":"Testing Framework Integration","permalink":"/developer-tools/merobox/testing-framework-integration"}}');var r=t(86070),s=t(83545);const l={title:"Workflow Advanced Features",description:"Advanced workflow features including parallel steps and custom scripts.",sidebar_position:7.5},o="Workflow Advanced Features",i={},c=[{value:"Parallel Step Execution",id:"parallel-step-execution",level:2},{value:"Basic Parallel Execution",id:"basic-parallel-execution",level:3},{value:"Parallel with Repeat",id:"parallel-with-repeat",level:3},{value:"Custom Scripts",id:"custom-scripts",level:2},{value:"Basic Script Execution",id:"basic-script-execution",level:3},{value:"Script with Variables",id:"script-with-variables",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Try-Catch Pattern",id:"try-catch-pattern",level:3},{value:"Validation Steps",id:"validation-steps",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Resource Management",id:"resource-management",level:3},{value:"Caching and Reuse",id:"caching-and-reuse",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Parallel Execution",id:"1-use-parallel-execution",level:3},{value:"2. Implement Error Handling",id:"2-implement-error-handling",level:3},{value:"3. Use Appropriate Resources",id:"3-use-appropriate-resources",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Parallel Execution Failures",id:"parallel-execution-failures",level:4},{value:"Script Execution Errors",id:"script-execution-errors",level:4},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"workflow-advanced-features",children:"Workflow Advanced Features"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers advanced workflow features in Merobox, including parallel step\nexecution and custom scripts."}),"\n",(0,r.jsx)(n.h2,{id:"parallel-step-execution",children:"Parallel Step Execution"}),"\n",(0,r.jsx)(n.p,{children:"Execute multiple steps simultaneously for improved performance:"}),"\n",(0,r.jsx)(n.h3,{id:"basic-parallel-execution",children:"Basic Parallel Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Parallel Operations\n    type: parallel\n    steps:\n      - name: Install App 1\n        type: install_application\n        node: calimero-node-1\n        path: ./app1.wasm\n        dev: true\n        outputs:\n          app_id_1: applicationId\n\n      - name: Install App 2\n        type: install_application\n        node: calimero-node-2\n        path: ./app2.wasm\n        dev: true\n        outputs:\n          app_id_2: applicationId\n\n      - name: Create Identity\n        type: create_identity\n        node: calimero-node-3\n        outputs:\n          public_key: publicKey\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parallel-with-repeat",children:"Parallel with Repeat"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Parallel Repeat Operations\n    type: parallel\n    steps:\n      - name: Install Multiple Apps\n        type: repeat\n        count: 3\n        outputs:\n          iteration: iteration\n        steps:\n          - name: Install App {{iteration}}\n            type: install_application\n            node: calimero-node-{{iteration}}\n            path: ./app{{iteration}}.wasm\n            dev: true\n            outputs:\n              app_id: applicationId\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-scripts",children:"Custom Scripts"}),"\n",(0,r.jsx)(n.p,{children:"Use custom scripts for complex operations:"}),"\n",(0,r.jsx)(n.h3,{id:"basic-script-execution",children:"Basic Script Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Custom Setup Script\n    type: script\n    script: |\n      echo "Setting up custom environment..."\n      mkdir -p /tmp/custom-data\n      echo "custom_value" > /tmp/custom-data/sample.txt\n      echo "Setup complete"\n    outputs:\n      setup_result: output\n\n  - name: Use Script Output\n    type: call\n    node: calimero-node-1\n    context_id: \'{{context_id}}\'\n    method: process_data\n    args:\n      data: \'{{setup_result}}\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"script-with-variables",children:"Script with Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Process Data Script\n    type: script\n    script: |\n      echo "Processing data for context: {{context_id}}"\n      echo "Using public key: {{public_key}}"\n      # Process the data\n      echo "processed_data" > /tmp/result.txt\n      echo "Processing complete"\n    outputs:\n      processed_data: output\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Implement basic error handling in workflows:"}),"\n",(0,r.jsx)(n.h3,{id:"try-catch-pattern",children:"Try-Catch Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    method: risky_method\n    args:\n      should_fail: false\n    outputs:\n      result: result\n\n  - name: Handle Success\n    type: script\n    script: |\n      echo \"Operation succeeded: {{result}}\"\n    condition: '{{result}} != null'\n\n  - name: Handle Error\n    type: script\n    script: |\n      echo \"Operation failed, continuing...\"\n    condition: '{{result}} == null'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"validation-steps",children:"Validation Steps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Validate Input\n    type: assert\n    statements:\n      - 'is_set({{context_id}})'\n      - 'is_set({{public_key}})'\n\n  - name: Execute Operation\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    method: safe_method\n    args:\n      key: '{{public_key}}'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Use appropriate node counts\nnodes:\n  count: 3 # Scale based on needs\n  image: ghcr.io/calimero-network/merod:edge\n\nsteps:\n  - name: Efficient Operations\n    type: parallel\n    max_concurrent: 2 # Limit concurrent operations\n    steps:\n      - name: Operation 1\n        type: call\n        # ... operation details\n      - name: Operation 2\n        type: call\n        # ... operation details\n"})}),"\n",(0,r.jsx)(n.h3,{id:"caching-and-reuse",children:"Caching and Reuse"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Create Reusable Data\n    type: script\n    script: |\n      echo \"Creating reusable data...\"\n      echo \"shared_data\" > /tmp/shared.txt\n    outputs:\n      shared_data: output\n\n  - name: Use Shared Data\n    type: call\n    node: calimero-node-1\n    method: use_shared_data\n    args:\n      data: '{{shared_data}}'\n\n  - name: Use Shared Data Again\n    type: call\n    node: calimero-node-2\n    method: use_shared_data\n    args:\n      data: '{{shared_data}}'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-parallel-execution",children:"1. Use Parallel Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Good: Use parallel execution for independent operations\nsteps:\n  - name: Parallel Setup\n    type: parallel\n    steps:\n      - name: Setup Node 1\n        type: install_application\n        # ... setup details\n      - name: Setup Node 2\n        type: install_application\n        # ... setup details\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-implement-error-handling",children:"2. Implement Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Good: Include error handling\nsteps:\n  - name: Validate Before Execution\n    type: assert\n    statements:\n      - 'is_set({{required_variable}})'\n\n  - name: Execute Operation\n    type: call\n    # ... operation details\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-appropriate-resources",children:"3. Use Appropriate Resources"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Good: Scale resources appropriately\nnodes:\n  count: 3 # Use appropriate number of nodes\n  image: ghcr.io/calimero-network/merod:edge\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.h4,{id:"parallel-execution-failures",children:"Parallel Execution Failures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check node health\nmerobox health --verbose\n\n# Check logs\nmerobox logs calimero-node-1\n"})}),"\n",(0,r.jsx)(n.h4,{id:"script-execution-errors",children:"Script Execution Errors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run with verbose output\nmerobox bootstrap run workflow.yml --verbose\n\n# Check script output\nmerobox logs calimero-node-1 | grep "script"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand advanced workflow features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},83545:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(30758);const r={},s=a.createContext(r);function l(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);