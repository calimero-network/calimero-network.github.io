"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3365],{61503:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"developer-tools/SDK/protocol-sdk/protocol-rs-sdk","title":"Rust Protocol SDK","description":"This guide provides a comprehensive reference of the essential macros and","source":"@site/docs/05-developer-tools/02-SDK/03-protocol-sdk/02-protocol-rs-sdk.mdx","sourceDirName":"05-developer-tools/02-SDK/03-protocol-sdk","slug":"/developer-tools/SDK/protocol-sdk/protocol-rs-sdk","permalink":"/developer-tools/SDK/protocol-sdk/protocol-rs-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/02-SDK/03-protocol-sdk/02-protocol-rs-sdk.mdx","tags":[],"version":"current","lastUpdatedAt":1759753098000,"sidebarPosition":2,"frontMatter":{"id":"protocol-rs-sdk","title":"Rust Protocol SDK"},"sidebar":"tutorialSidebar","previous":{"title":"Protocol SDK","permalink":"/developer-tools/SDK/protocol-sdk/protocol-sdk"},"next":{"title":"Rust SDK Deep Dive","permalink":"/developer-tools/SDK/protocol-sdk/rust-sdk-deep-dive"}}');var s=t(86070),l=t(83545);const a={id:"protocol-rs-sdk",title:"Rust Protocol SDK"},i="Calimero Rust SDK",o={},p=[{value:"Core Macros",id:"core-macros",level:2},{value:"#[app::state]",id:"appstate",level:3},{value:"#[app::logic]",id:"applogic",level:3},{value:"#[app::init]",id:"appinit",level:3},{value:"#[app::event]",id:"appevent",level:3},{value:"Utility Macros",id:"utility-macros",level:2},{value:"app::emit!",id:"appemit",level:3},{value:"app::log!",id:"applog",level:3},{value:"app::bail!",id:"appbail",level:3},{value:"app::err!",id:"apperr",level:3},{value:"Return Types",id:"return-types",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"calimero-rust-sdk",children:"Calimero Rust SDK"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides a comprehensive reference of the essential macros and\nfunctionality provided by the Calimero SDK for building P2P Rust applications."}),"\n",(0,s.jsx)(n.h2,{id:"core-macros",children:"Core Macros"}),"\n",(0,s.jsx)(n.h3,{id:"appstate",children:"#[app::state]"}),"\n",(0,s.jsxs)(n.p,{children:["Marks a struct as the application state. The state struct must implement\n",(0,s.jsx)(n.code,{children:"BorshSerialize"})," and ",(0,s.jsx)(n.code,{children:"BorshDeserialize"}),". This macro automatically generates the\n",(0,s.jsx)(n.code,{children:"Self::external()"})," method for external proposal functionality."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use calimero_sdk::borsh::{BorshDeserialize, BorshSerialize};\n\n#[app::state(emits = for<'a> MyEvent<'a>)]\n#[derive(Default, BorshSerialize, BorshDeserialize)]\n#[borsh(crate = \"calimero_sdk::borsh\")]\nstruct MyAppState {\n    // Your state fields here\n    users: calimero_storage::collections::UnorderedMap<String, UserProfile>,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Automatically generates ",(0,s.jsx)(n.code,{children:"Self::external()"})," method for proposal management"]}),"\n",(0,s.jsx)(n.li,{children:"Integrates with Calimero's storage system"}),"\n",(0,s.jsx)(n.li,{children:"Supports event emission specification"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"applogic",children:"#[app::logic]"}),"\n",(0,s.jsx)(n.p,{children:"Marks an implementation block as containing the application logic. All public\nmethods in this block become available as application endpoints."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[app::logic]\nimpl MyAppState {\n    // Your methods here\n    pub fn add_user(&mut self, username: String, profile: UserProfile) -> app::Result<()> {\n        // Implementation\n        Ok(())\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"appinit",children:"#[app::init]"}),"\n",(0,s.jsx)(n.p,{children:"Marks a method as the initializer, which is called when the application is first\ndeployed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[app::logic]\nimpl MyAppState {\n    #[app::init]\n    pub fn init() -> Self {\n        Self {\n            users: calimero_storage::collections::UnorderedMap::new(),\n        }\n    }\n\n    // Example with init parameters\n    #[app::init]\n    pub fn init_with_params(\n        initial_admin: String,\n        max_users: u32,\n        is_public: bool,\n    ) -> Self {\n        Self {\n            users: calimero_storage::collections::UnorderedMap::new(),\n            admin: initial_admin,\n            max_users,\n            is_public,\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"appevent",children:"#[app::event]"}),"\n",(0,s.jsx)(n.p,{children:"Defines an event type that can be emitted by your application. Events support\nlifetime parameters for efficient string handling."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[app::event]\npub enum MyEvent<'a> {\n    ValueUpdated { key: &'a str, value: &'a str },\n    ValueRemoved { key: &'a str },\n    UserAdded { username: &'a str },\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"utility-macros",children:"Utility Macros"}),"\n",(0,s.jsx)(n.h3,{id:"appemit",children:"app::emit!"}),"\n",(0,s.jsx)(n.p,{children:"Emit events from your application. Events are only emitted if the transaction\nsucceeds."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"app::emit!(MyEvent::ValueUpdated {\n    key: &key,\n    value: &new_value\n});\n\napp::emit!(MyEvent::UserAdded { username: &username });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"applog",children:"app::log!"}),"\n",(0,s.jsx)(n.p,{children:"Log messages for debugging and monitoring. These appear in the application logs."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'app::log!("Setting key: {:?} to value: {:?}", key, value);\napp::log!("User {} added successfully", username);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"appbail",children:"app::bail!"}),"\n",(0,s.jsx)(n.p,{children:"Return an error and exit the current function early."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'if !self.users.contains_key(&username) {\n    app::bail!("User not found: {}", username);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"apperr",children:"app::err!"}),"\n",(0,s.jsx)(n.p,{children:"Create an error value for returning from functions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'return app::err!("Invalid input: {}", input);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"return-types",children:"Return Types"}),"\n",(0,s.jsxs)(n.p,{children:["The SDK provides a convenient ",(0,s.jsx)(n.code,{children:"app::Result<T>"})," type alias:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use calimero_sdk::app;\n\npub fn my_function(&self) -> app::Result<String> {\n    // Your implementation\n    Ok("success".to_string())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example showing how these macros work together:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use calimero_sdk::borsh::{BorshDeserialize, BorshSerialize};\nuse calimero_sdk::{app, env};\nuse calimero_storage::collections::UnorderedMap;\n\n#[app::event]\npub enum StoreEvent<\'a> {\n    ValueSet { key: &\'a str, value: &\'a str },\n    ValueRemoved { key: &\'a str },\n}\n\n#[app::state(emits = for<\'a> StoreEvent<\'a>)]\n#[derive(Default, BorshSerialize, BorshDeserialize)]\n#[borsh(crate = "calimero_sdk::borsh")]\nstruct Store {\n    values: UnorderedMap<String, String>,\n}\n\n#[app::logic]\nimpl Store {\n    #[app::init]\n    pub fn init() -> Self {\n        Self {\n            values: UnorderedMap::new(),\n        }\n    }\n\n    pub fn set(&mut self, key: String, value: String) -> app::Result<()> {\n        app::log!("Setting key: {:?} to value: {:?}", key, value);\n\n        if self.values.contains(&key)? {\n            app::emit!(StoreEvent::ValueSet {\n                key: &key,\n                value: &value\n            });\n        } else {\n            app::emit!(StoreEvent::ValueSet {\n                key: &key,\n                value: &value\n            });\n        }\n\n        self.values.insert(key, value)?;\n        Ok(())\n    }\n\n    pub fn get(&self, key: &str) -> app::Result<Option<String>> {\n        app::log!("Getting key: {:?}", key);\n        self.values.get(key).map_err(Into::into)\n    }\n\n    pub fn remove(&mut self, key: &str) -> app::Result<Option<String>> {\n        app::log!("Removing key: {:?}", key);\n\n        if let Some(value) = self.values.remove(key)? {\n            app::emit!(StoreEvent::ValueRemoved { key });\n            Ok(Some(value))\n        } else {\n            Ok(None)\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,s.jsxs)("ol",{children:[(0,s.jsx)("li",{children:(0,s.jsx)(n.p,{children:"State changes are atomic - if a method fails, all changes are rolled back"})}),(0,s.jsx)("li",{children:"Events are only emitted if the transaction succeeds"}),(0,s.jsx)("li",{children:"Read-only operations have no network overhead"}),(0,s.jsx)("li",{children:(0,s.jsxs)(n.p,{children:["All public methods in the ",(0,s.jsx)(n.code,{children:"#[app::logic]"})," block become available as\napplication endpoints"]})}),(0,s.jsx)("li",{children:(0,s.jsxs)(n.p,{children:["Collections return ",(0,s.jsx)(n.code,{children:"Result<T, StoreError>"})," for most operations - handle errors appropriately"]})}),(0,s.jsx)("li",{children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Self::external()"})," method is automatically generated by ",(0,s.jsx)(n.code,{children:"#[app::state]"})," for proposal management"]})})]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Learn about ",(0,s.jsx)(n.a,{href:"./calimero-collections",children:"Calimero Collections"})," for data storage"]}),"\n",(0,s.jsxs)(n.li,{children:["See ",(0,s.jsx)(n.a,{href:"./rust-sdk-deep-dive",children:"Rust SDK Deep Dive"})," for advanced patterns"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},83545:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(30758);const s={},l=r.createContext(s);function a(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);