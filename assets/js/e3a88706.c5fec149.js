"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5193],{32202:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developer-tools/merobox/real-world-examples","title":"Real-World Examples","description":"Practical examples for common real-world scenarios with Merobox.","source":"@site/docs/05-developer-tools/merobox/real-world-examples.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/real-world-examples","permalink":"/developer-tools/merobox/real-world-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/real-world-examples.mdx","tags":[],"version":"current","lastUpdatedAt":1757931844000,"sidebarPosition":4.2,"frontMatter":{"title":"Real-World Examples","description":"Practical examples for common real-world scenarios with Merobox.","sidebar_position":4.2},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start Tutorials","permalink":"/developer-tools/merobox/quick-start-tutorials"},"next":{"title":"Testing Integration Examples","permalink":"/developer-tools/merobox/testing-integration-examples"}}');var o=t(86070),i=t(48854);const r={title:"Real-World Examples",description:"Practical examples for common real-world scenarios with Merobox.",sidebar_position:4.2},s="Real-World Examples",l={},d=[{value:"Example 1: Multi-Node Testing",id:"example-1-multi-node-testing",level:2},{value:"Example 2: Authentication Service Integration",id:"example-2-authentication-service-integration",level:2},{value:"Example 3: Performance Testing",id:"example-3-performance-testing",level:2},{value:"Example 4: Database Integration",id:"example-4-database-integration",level:2},{value:"Example 5: Load Balancing",id:"example-5-load-balancing",level:2},{value:"Example 6: Monitoring and Alerting",id:"example-6-monitoring-and-alerting",level:2},{value:"Best Practices for Real-World Examples",id:"best-practices-for-real-world-examples",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Monitoring and Validation",id:"4-monitoring-and-validation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"real-world-examples",children:"Real-World Examples"})}),"\n",(0,o.jsx)(n.p,{children:"These examples demonstrate how to use Merobox for common real-world scenarios,\nfrom multi-node testing to performance testing."}),"\n",(0,o.jsx)(n.h2,{id:"example-1-multi-node-testing",children:"Example 1: Multi-Node Testing"}),"\n",(0,o.jsx)(n.p,{children:"Test your application across multiple nodes to simulate real-world scenarios."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Multi-node application testing\nname: Multi-Node Test\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: test-node\n\nsteps:\n  # Install application on first node\n  - name: Install Application\n    type: install_application\n    node: test-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  # Create context on first node\n  - name: Create Context\n    type: create_context\n    node: test-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  # Create identities on other nodes\n  - name: Create Identity on Node 2\n    type: create_identity\n    node: test-node-2\n    outputs:\n      node2_key: publicKey\n\n  - name: Create Identity on Node 3\n    type: create_identity\n    node: test-node-3\n    outputs:\n      node3_key: publicKey\n\n  # Invite nodes to context\n  - name: Invite Node 2\n    type: invite_identity\n    node: test-node-1\n    context_id: '{{context_id}}'\n    grantee_id: '{{node2_key}}'\n    granter_id: '{{member_key}}'\n    capability: member\n    outputs:\n      invite2: invitation\n\n  - name: Invite Node 3\n    type: invite_identity\n    node: test-node-1\n    context_id: '{{context_id}}'\n    grantee_id: '{{node3_key}}'\n    granter_id: '{{member_key}}'\n    capability: member\n    outputs:\n      invite3: invitation\n\n  # Join contexts\n  - name: Join from Node 2\n    type: join_context\n    node: test-node-2\n    context_id: '{{context_id}}'\n    invitee_id: '{{node2_key}}'\n    invitation: '{{invite2}}'\n\n  - name: Join from Node 3\n    type: join_context\n    node: test-node-3\n    context_id: '{{context_id}}'\n    invitee_id: '{{node3_key}}'\n    invitation: '{{invite3}}'\n\n  # Test cross-node communication\n  - name: Set Data from Node 1\n    type: call\n    node: test-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: set\n    args:\n      key: shared_data\n      value: 'set from node 1'\n\n  - name: Read from Node 2\n    type: call\n    node: test-node-2\n    context_id: '{{context_id}}'\n    executor_public_key: '{{node2_key}}'\n    method: get\n    args:\n      key: shared_data\n    outputs:\n      result2: result\n\n  - name: Read from Node 3\n    type: call\n    node: test-node-3\n    context_id: '{{context_id}}'\n    executor_public_key: '{{node3_key}}'\n    method: get\n    args:\n      key: shared_data\n    outputs:\n      result3: result\n\n  # Validate cross-node consistency\n  - name: Validate Cross-Node Data\n    type: assert\n    statements:\n      - \"contains({{result2}}, 'set from node 1')\"\n      - \"contains({{result3}}, 'set from node 1')\"\n      - '{{result2}} == {{result3}}'\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-2-authentication-service-integration",children:"Example 2: Authentication Service Integration"}),"\n",(0,o.jsx)(n.p,{children:"Use Merobox with authentication services for production-like testing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'description: Workflow with authentication service\nname: Auth Service Example\n\n# Enable authentication service\nauth_service: true\n\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: auth-node\n\nsteps:\n  - name: Wait for Auth Service\n    type: wait\n    seconds: 10\n    message: \'Waiting for authentication service to start...\'\n\n  - name: Install Application\n    type: install_application\n    node: auth-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: auth-node-1\n    application_id: \'{{app_id}}\'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test with Auth Service\n    type: script\n    script: |\n      echo "Testing with authentication service..."\n      echo "Node 1 URL: http://auth-node-1.127.0.0.1.nip.io"\n      echo "Node 2 URL: http://auth-node-2.127.0.0.1.nip.io"\n      echo "Auth Login: http://auth-node-1.127.0.0.1.nip.io/auth/login"\n      echo "Admin Dashboard: http://auth-node-1.127.0.0.1.nip.io/admin-dashboard"\n\nstop_all_nodes: true\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example-3-performance-testing",children:"Example 3: Performance Testing"}),"\n",(0,o.jsx)(n.p,{children:"Test your application's performance with repeated operations."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Performance testing workflow\nname: Performance Test\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: perf-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: perf-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: perf-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Performance Test\n    type: repeat\n    count: 100\n    outputs:\n      iteration: iteration\n    steps:\n      - name: Set Data\n        type: call\n        node: perf-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: set\n        args:\n          key: 'perf_key_{{iteration}}'\n          value: 'perf_value_{{iteration}}'\n\n      - name: Get Data\n        type: call\n        node: perf-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: get\n        args:\n          key: 'perf_key_{{iteration}}'\n        outputs:\n          result: result\n\n      - name: Validate Performance\n        type: assert\n        statements:\n          - \"contains({{result}}, 'perf_value_{{iteration}}')\"\n\n  - name: Performance Summary\n    type: script\n    script: |\n      echo \"Performance test completed!\"\n      echo \"Executed 100 set/get operations successfully\"\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-4-database-integration",children:"Example 4: Database Integration"}),"\n",(0,o.jsx)(n.p,{children:"Test applications that interact with databases."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Database integration testing\nname: Database Integration\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: db-node\n\n# Add database service\nservices:\n  - name: postgres\n    image: postgres:15\n    environment:\n      POSTGRES_DB: testdb\n      POSTGRES_USER: testuser\n      POSTGRES_PASSWORD: testpass\n    ports:\n      - 5432:5432\n\nsteps:\n  - name: Wait for Database\n    type: wait\n    seconds: 10\n    message: 'Waiting for database to start...'\n\n  - name: Install Application\n    type: install_application\n    node: db-node-1\n    path: ./db-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: db-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test Database Connection\n    type: call\n    node: db-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test_db_connection\n    args:\n      host: postgres\n      port: 5432\n      database: testdb\n      username: testuser\n      password: testpass\n    outputs:\n      db_result: result\n\n  - name: Validate Database Connection\n    type: assert\n    statements:\n      - \"contains({{db_result}}, 'connected')\"\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-5-load-balancing",children:"Example 5: Load Balancing"}),"\n",(0,o.jsx)(n.p,{children:"Test applications behind load balancers."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'description: Load balancing testing\nname: Load Balancing Test\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: lb-node\n\n# Add load balancer\nservices:\n  - name: nginx\n    image: nginx:alpine\n    ports:\n      - 8080:80\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n\nsteps:\n  - name: Wait for Load Balancer\n    type: wait\n    seconds: 5\n    message: \'Waiting for load balancer to start...\'\n\n  - name: Install Application on All Nodes\n    type: parallel\n    steps:\n      - name: Install on Node 1\n        type: install_application\n        node: lb-node-1\n        path: ./my-app.wasm\n        dev: true\n        outputs:\n          app_id_1: applicationId\n\n      - name: Install on Node 2\n        type: install_application\n        node: lb-node-2\n        path: ./my-app.wasm\n        dev: true\n        outputs:\n          app_id_2: applicationId\n\n      - name: Install on Node 3\n        type: install_application\n        node: lb-node-3\n        path: ./my-app.wasm\n        dev: true\n        outputs:\n          app_id_3: applicationId\n\n  - name: Test Load Balancer\n    type: script\n    script: |\n      echo "Testing load balancer..."\n      for i in {1..10}; do\n        echo "Request $i:"\n        curl -s http://localhost:8080/health\n        echo\n      done\n\nstop_all_nodes: true\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example-6-monitoring-and-alerting",children:"Example 6: Monitoring and Alerting"}),"\n",(0,o.jsx)(n.p,{children:"Set up monitoring and alerting for your applications."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Monitoring and alerting setup\nname: Monitoring Example\n\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: monitor-node\n\n# Add monitoring stack\nservices:\n  - name: prometheus\n    image: prom/prometheus:latest\n    ports:\n      - 9090:9090\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n\n  - name: grafana\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: admin\n\nsteps:\n  - name: Wait for Monitoring Stack\n    type: wait\n    seconds: 15\n    message: 'Waiting for monitoring stack to start...'\n\n  - name: Install Application\n    type: install_application\n    node: monitor-node-1\n    path: ./monitored-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: monitor-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Generate Load\n    type: repeat\n    count: 50\n    steps:\n      - name: Call Application\n        type: call\n        node: monitor-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: process_data\n        args:\n          data: 'load_test_{{iteration}}'\n\n  - name: Check Monitoring\n    type: script\n    script: |\n      echo \"Monitoring stack is running:\"\n      echo \"Prometheus: http://localhost:9090\"\n      echo \"Grafana: http://localhost:3000 (admin/admin)\"\n      echo \"Application metrics should be visible in Prometheus\"\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-for-real-world-examples",children:"Best Practices for Real-World Examples"}),"\n",(0,o.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Use environment-specific settings\nnodes:\n  image: ghcr.io/calimero-network/merod:edge\n  environment:\n    RUST_LOG: info\n    CALIMERO_CHAIN_ID: testnet-1\n    CALIMERO_NETWORK: testnet\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Set appropriate resource limits\nnodes:\n  resources:\n    memory: '2G'\n    cpus: '1.0'\n  count: 3 # Scale based on needs\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Include comprehensive error handling\nsteps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    method: risky_method\n    retry:\n      attempts: 3\n      delay: 5\n    on_error:\n      - name: Log Error\n        type: script\n        script: echo "Operation failed: {{error}}"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-monitoring-and-validation",children:"4. Monitoring and Validation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Always validate results\nsteps:\n  - name: Validate Results\n    type: assert\n    statements:\n      - '{{result}} != null'\n      - \"contains({{result}}, 'expected_value')\"\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Now that you've seen real-world examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./testing-integration-examples",children:"Testing Integration Examples"})," - Integration\nwith testing frameworks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./advanced-examples",children:"Advanced Examples"})," - Complex workflows and advanced\nfeatures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},48854:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(30758);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);