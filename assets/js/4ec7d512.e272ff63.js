"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7040],{48854:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(30758);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},96031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"developer-tools/merobox/python-customization","title":"Python Customization","description":"Advanced Python customization and extension capabilities for Merobox CLI.","source":"@site/docs/05-developer-tools/merobox/python-customization.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/python-customization","permalink":"/developer-tools/merobox/python-customization","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/python-customization.mdx","tags":[],"version":"current","lastUpdatedAt":1757931844000,"sidebarPosition":6,"frontMatter":{"title":"Python Customization","description":"Advanced Python customization and extension capabilities for Merobox CLI.","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Best Practices","permalink":"/developer-tools/merobox/best-practices"},"next":{"title":"Advanced Configuration","permalink":"/developer-tools/merobox/advanced-configuration"}}');var s=t(86070),i=t(48854);const r={title:"Python Customization",description:"Advanced Python customization and extension capabilities for Merobox CLI.",sidebar_position:6},a="Python Customization",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Custom Commands",id:"custom-commands",level:2},{value:"Command Registration",id:"command-registration",level:3},{value:"Command Examples",id:"command-examples",level:3},{value:"Database Management Command",id:"database-management-command",level:4},{value:"Custom Health Check",id:"custom-health-check",level:4},{value:"Custom Step Types",id:"custom-step-types",level:2},{value:"Step Type Registration",id:"step-type-registration",level:3},{value:"Custom Step Examples",id:"custom-step-examples",level:3},{value:"Database Migration Step",id:"database-migration-step",level:4},{value:"Custom Validation Step",id:"custom-validation-step",level:4},{value:"Plugin System",id:"plugin-system",level:2},{value:"Plugin Structure",id:"plugin-structure",level:3},{value:"Plugin Installation",id:"plugin-installation",level:3},{value:"Testing Integration",id:"testing-integration",level:2},{value:"Basic Testing",id:"basic-testing",level:3},{value:"Workflow Testing",id:"workflow-testing",level:3},{value:"Pytest Integration",id:"pytest-integration",level:3},{value:"Advanced Python Features",id:"advanced-python-features",level:2},{value:"Custom Managers",id:"custom-managers",level:3},{value:"Event Hooks",id:"event-hooks",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Organization",id:"code-organization",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Security",id:"security",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"python-customization",children:"Python Customization"})}),"\n",(0,s.jsx)(n.p,{children:"This guide covers advanced Python customization and extension capabilities for\nMerobox CLI, including custom commands, step types, and plugin development."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Merobox provides extensive Python APIs for customization and extension:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Commands"}),": Create new CLI commands for specific use cases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Step Types"}),": Implement custom workflow steps"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugin System"}),": Develop reusable plugins for Merobox"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing Integration"}),": Use Merobox in your Python test suites"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"custom-commands",children:"Custom Commands"}),"\n",(0,s.jsx)(n.p,{children:"Create custom Merobox commands for specific use cases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# custom_commands.py\nimport click\nfrom merobox.commands.manager import CalimeroManager\n\n@click.command()\n@click.option(\'--custom-option\', help=\'Custom option\')\ndef custom_command(custom_option):\n    """Custom command for specific use case."""\n    manager = CalimeroManager()\n    # Custom logic here\n    click.echo(f"Custom command executed with option: {custom_option}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"command-registration",children:"Command Registration"}),"\n",(0,s.jsx)(n.p,{children:"Register your custom commands with Merobox:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# main.py\nfrom merobox.cli import cli\nfrom custom_commands import custom_command\n\n# Register custom command\ncli.add_command(custom_command)\n\nif __name__ == '__main__':\n    cli()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"command-examples",children:"Command Examples"}),"\n",(0,s.jsx)(n.h4,{id:"database-management-command",children:"Database Management Command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@click.command()\n@click.option(\'--backup\', is_flag=True, help=\'Create database backup\')\n@click.option(\'--restore\', help=\'Restore from backup file\')\ndef db_manage(backup, restore):\n    """Manage Calimero node databases."""\n    manager = CalimeroManager()\n\n    if backup:\n        # Create backup\n        manager.backup_database()\n        click.echo("Database backup created")\n    elif restore:\n        # Restore from backup\n        manager.restore_database(restore)\n        click.echo(f"Database restored from {restore}")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"custom-health-check",children:"Custom Health Check"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@click.command()\n@click.option(\'--detailed\', is_flag=True, help=\'Show detailed health info\')\ndef health_check(detailed):\n    """Enhanced health check with custom metrics."""\n    manager = CalimeroManager()\n\n    # Basic health check\n    health = manager.check_health()\n\n    if detailed:\n        # Custom detailed health metrics\n        metrics = manager.get_custom_metrics()\n        click.echo(f"Custom metrics: {metrics}")\n\n    click.echo(f"Health status: {health[\'status\']}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-step-types",children:"Custom Step Types"}),"\n",(0,s.jsx)(n.p,{children:"Implement custom step types for specialized workflow operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# custom_steps.py\nfrom merobox.commands.bootstrap.steps.base import BaseStep\n\nclass CustomStep(BaseStep):\n    def _get_required_fields(self):\n        return ['custom_field']\n\n    def _get_exportable_variables(self):\n        return [('result', 'custom_result', 'Custom step result')]\n\n    def execute(self):\n        # Custom step logic\n        custom_field = self.config['custom_field']\n        # Process custom_field...\n        return {'result': 'custom_output'}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-type-registration",children:"Step Type Registration"}),"\n",(0,s.jsx)(n.p,{children:"Register custom step types with the workflow executor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# workflow_executor.py\nfrom merobox.commands.bootstrap.run.executor import WorkflowExecutor\nfrom custom_steps import CustomStep\n\n# Register custom step type\nexecutor = WorkflowExecutor()\nexecutor.register_step_type('custom_step', CustomStep)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-step-examples",children:"Custom Step Examples"}),"\n",(0,s.jsx)(n.h4,{id:"database-migration-step",children:"Database Migration Step"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class DatabaseMigrationStep(BaseStep):\n    def _get_required_fields(self):\n        return ['migration_file', 'target_node']\n\n    def _get_exportable_variables(self):\n        return [('migration_id', 'migration_id', 'Migration identifier')]\n\n    def execute(self):\n        migration_file = self.config['migration_file']\n        target_node = self.config['target_node']\n\n        # Execute database migration\n        migration_id = self.run_migration(migration_file, target_node)\n\n        return {'migration_id': migration_id}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-validation-step",children:"Custom Validation Step"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ValidationStep(BaseStep):\n    def _get_required_fields(self):\n        return ['validation_rules', 'data_source']\n\n    def _get_exportable_variables(self):\n        return [('validation_result', 'is_valid', 'Validation result')]\n\n    def execute(self):\n        rules = self.config['validation_rules']\n        data_source = self.config['data_source']\n\n        # Perform custom validation\n        is_valid = self.validate_data(rules, data_source)\n\n        if not is_valid:\n            raise ValueError(\"Validation failed\")\n\n        return {'is_valid': is_valid}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-system",children:"Plugin System"}),"\n",(0,s.jsx)(n.p,{children:"Create Merobox plugins for reusable functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# merobox_plugin.py\nfrom merobox.plugin import MeroboxPlugin\n\nclass MyPlugin(MeroboxPlugin):\n    def register_commands(self, cli):\n        @cli.command()\n        def my_command():\n            """My custom command."""\n            pass\n\n    def register_steps(self, step_registry):\n        step_registry.register(\'custom_step\', CustomStep)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,s.jsx)(n.p,{children:"Organize your plugin with proper structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my_merobox_plugin/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 plugin.py\n\u251c\u2500\u2500 commands/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 custom_commands.py\n\u251c\u2500\u2500 steps/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 custom_steps.py\n\u2514\u2500\u2500 setup.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plugin-installation",children:"Plugin Installation"}),"\n",(0,s.jsx)(n.p,{children:"Install your plugin for use with Merobox:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='my-merobox-plugin',\n    version='1.0.0',\n    packages=find_packages(),\n    entry_points={\n        'merobox.plugins': [\n            'my_plugin = my_merobox_plugin.plugin:MyPlugin',\n        ],\n    },\n    install_requires=[\n        'merobox',\n    ],\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Install the plugin:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install -e .\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-integration",children:"Testing Integration"}),"\n",(0,s.jsx)(n.p,{children:"Use Merobox in your Python test suites:"}),"\n",(0,s.jsx)(n.h3,{id:"basic-testing",children:"Basic Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# test_my_app.py\nimport pytest\nfrom merobox.testing import cluster\n\ndef test_my_application():\n    with cluster(count=2, prefix="test") as test_env:\n        # Get node endpoints\n        node1_endpoint = test_env["endpoints"]["test-1"]\n        node2_endpoint = test_env["endpoints"]["test-2"]\n\n        # Test your application\n        result = my_app_function(node1_endpoint)\n        assert result is not None\n'})}),"\n",(0,s.jsx)(n.h3,{id:"workflow-testing",children:"Workflow Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# test_workflow.py\nfrom merobox.testing import workflow\n\ndef test_complex_workflow():\n    with workflow("my-workflow.yml", prefix="test") as env:\n        # Verify workflow results\n        assert env["workflow_result"] is True\n\n        # Test application functionality\n        endpoints = env["endpoints"]\n        result = test_my_app(endpoints)\n        assert result["status"] == "success"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pytest-integration",children:"Pytest Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# conftest.py\nimport pytest\nfrom merobox.testing import pytest_cluster\n\n# Create pytest fixture\nmerobox_cluster = pytest_cluster(count=2, scope="session")\n\n# test_example.py\ndef test_with_cluster(merobox_cluster):\n    endpoints = merobox_cluster["endpoints"]\n    # Your test logic here\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-python-features",children:"Advanced Python Features"}),"\n",(0,s.jsx)(n.h3,{id:"custom-managers",children:"Custom Managers"}),"\n",(0,s.jsx)(n.p,{children:"Extend the CalimeroManager for specialized functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# custom_manager.py\nfrom merobox.commands.manager import CalimeroManager\n\nclass CustomCalimeroManager(CalimeroManager):\n    def __init__(self):\n        super().__init__()\n        self.custom_config = {}\n\n    def setup_custom_environment(self, config):\n        """Setup custom environment configuration."""\n        self.custom_config = config\n        # Custom setup logic\n\n    def get_custom_metrics(self):\n        """Get custom performance metrics."""\n        # Custom metrics collection\n        return {\n            \'custom_metric_1\': \'value1\',\n            \'custom_metric_2\': \'value2\'\n        }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"event-hooks",children:"Event Hooks"}),"\n",(0,s.jsx)(n.p,{children:"Implement event hooks for workflow lifecycle:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# event_hooks.py\nfrom merobox.events import WorkflowEvent, EventHandler\n\nclass CustomEventHandler(EventHandler):\n    def on_workflow_start(self, event: WorkflowEvent):\n        """Called when workflow starts."""\n        print(f"Workflow {event.workflow_id} started")\n\n    def on_step_complete(self, event: WorkflowEvent):\n        """Called when a step completes."""\n        print(f"Step {event.step_name} completed")\n\n    def on_workflow_complete(self, event: WorkflowEvent):\n        """Called when workflow completes."""\n        print(f"Workflow {event.workflow_id} completed")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,s.jsx)(n.p,{children:"Advanced configuration management:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# config_manager.py\nfrom merobox.config import ConfigManager\nimport yaml\n\nclass CustomConfigManager(ConfigManager):\n    def load_custom_config(self, config_path):\n        """Load custom configuration from file."""\n        with open(config_path, \'r\') as f:\n            config = yaml.safe_load(f)\n\n        # Process custom configuration\n        self.merge_config(config)\n\n    def validate_custom_config(self, config):\n        """Validate custom configuration."""\n        required_fields = [\'custom_field1\', \'custom_field2\']\n\n        for field in required_fields:\n            if field not in config:\n                raise ValueError(f"Missing required field: {field}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"code-organization",children:"Code Organization"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modular Design"}),": Keep commands, steps, and plugins in separate modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling and logging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Document your custom code with docstrings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Write comprehensive tests for your custom code"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Management"}),": Properly manage resources and connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Implement caching where appropriate"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async Operations"}),": Use async/await for I/O operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": Be mindful of memory usage in long-running processes"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input Validation"}),": Validate all inputs to prevent security issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Control"}),": Implement proper access controls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Secret Management"}),": Use secure methods for handling secrets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit Logging"}),": Log important operations for audit purposes"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you understand Python customization:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./advanced-configuration",children:"Advanced Configuration"})," - Other advanced features"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);