"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7040],{83545:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(30758);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},91719:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"developer-tools/merobox/python-customization","title":"Python Customization","description":"Basic Python integration and testing capabilities for Merobox CLI.","source":"@site/docs/05-developer-tools/merobox/python-customization.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/python-customization","permalink":"/developer-tools/merobox/python-customization","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/python-customization.mdx","tags":[],"version":"current","lastUpdatedAt":1759753098000,"sidebarPosition":6,"frontMatter":{"title":"Python Customization","description":"Basic Python integration and testing capabilities for Merobox CLI.","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Best Practices","permalink":"/developer-tools/merobox/best-practices"},"next":{"title":"Advanced Configuration","permalink":"/developer-tools/merobox/advanced-configuration"}}');var r=o(86070),s=o(83545);const i={title:"Python Customization",description:"Basic Python integration and testing capabilities for Merobox CLI.",sidebar_position:6},l="Python Customization",a={},u=[{value:"Overview",id:"overview",level:2},{value:"Basic Python Integration",id:"basic-python-integration",level:2},{value:"Using Merobox in Python Scripts",id:"using-merobox-in-python-scripts",level:3},{value:"Testing Integration",id:"testing-integration",level:2},{value:"Basic Testing Setup",id:"basic-testing-setup",level:3},{value:"Workflow Automation",id:"workflow-automation",level:2},{value:"Running Workflows from Python",id:"running-workflows-from-python",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Resource Cleanup",id:"resource-cleanup",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"python-customization",children:"Python Customization"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers basic Python integration and testing capabilities for Merobox\nCLI."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Merobox provides basic Python integration for testing and automation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing Integration"}),": Use Merobox in your Python test suites"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic Automation"}),": Automate Merobox workflows with Python scripts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Management"}),": Manage test environments programmatically"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-python-integration",children:"Basic Python Integration"}),"\n",(0,r.jsx)(n.h3,{id:"using-merobox-in-python-scripts",children:"Using Merobox in Python Scripts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# basic_integration.py\nimport subprocess\nimport json\n\ndef run_merobox_command(command):\n    """Run a Merobox command and return the result."""\n    try:\n        result = subprocess.run(\n            [\'merobox\'] + command,\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        print(f"Error running merobox command: {e}")\n        return None\n\n# Example usage\ndef start_nodes(count=2):\n    """Start Merobox nodes."""\n    output = run_merobox_command([\'run\', \'--count\', str(count)])\n    print(f"Started {count} nodes: {output}")\n\ndef check_health():\n    """Check node health."""\n    output = run_merobox_command([\'health\'])\n    print(f"Health status: {output}")\n\ndef stop_nodes():\n    """Stop all nodes."""\n    output = run_merobox_command([\'stop\', \'--all\'])\n    print(f"Stopped nodes: {output}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing-integration",children:"Testing Integration"}),"\n",(0,r.jsx)(n.h3,{id:"basic-testing-setup",children:"Basic Testing Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_merobox.py\nimport pytest\nimport subprocess\nimport time\n\nclass MeroboxTestHelper:\n    def __init__(self):\n        self.nodes = []\n\n    def start_nodes(self, count=2):\n        """Start Merobox nodes for testing."""\n        result = subprocess.run(\n            [\'merobox\', \'run\', \'--count\', str(count)],\n            capture_output=True,\n            text=True\n        )\n        if result.returncode == 0:\n            self.nodes = [f"calimero-node-{i+1}" for i in range(count)]\n            return True\n        return False\n\n    def stop_nodes(self):\n        """Stop all test nodes."""\n        subprocess.run([\'merobox\', \'stop\', \'--all\'])\n        self.nodes = []\n\n    def check_health(self):\n        """Check health of all nodes."""\n        result = subprocess.run(\n            [\'merobox\', \'health\'],\n            capture_output=True,\n            text=True\n        )\n        return result.returncode == 0\n\n# Test fixture\n@pytest.fixture\ndef merobox_helper():\n    helper = MeroboxTestHelper()\n    yield helper\n    helper.stop_nodes()\n\ndef test_basic_functionality(merobox_helper):\n    """Test basic Merobox functionality."""\n    assert merobox_helper.start_nodes(2)\n    assert merobox_helper.check_health()\n    merobox_helper.stop_nodes()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"workflow-automation",children:"Workflow Automation"}),"\n",(0,r.jsx)(n.h3,{id:"running-workflows-from-python",children:"Running Workflows from Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# workflow_automation.py\nimport subprocess\nimport yaml\nimport tempfile\nimport os\n\ndef create_workflow_file(workflow_config):\n    \"\"\"Create a temporary workflow file.\"\"\"\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.yml', delete=False) as f:\n        yaml.dump(workflow_config, f)\n        return f.name\n\ndef run_workflow(workflow_config):\n    \"\"\"Run a Merobox workflow from Python.\"\"\"\n    workflow_file = create_workflow_file(workflow_config)\n\n    try:\n        result = subprocess.run(\n            ['merobox', 'bootstrap', 'run', workflow_file],\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        print(f\"Workflow failed: {e}\")\n        return None\n    finally:\n        os.unlink(workflow_file)\n\n# Example workflow configuration\ndef create_test_workflow():\n    \"\"\"Create a simple test workflow.\"\"\"\n    return {\n        'description': 'Test workflow from Python',\n        'name': 'Python Test Workflow',\n        'nodes': {\n            'chain_id': 'testnet-1',\n            'count': 1,\n            'image': 'ghcr.io/calimero-network/merod:edge'\n        },\n        'steps': [\n            {\n                'name': 'Test Step',\n                'type': 'script',\n                'script': 'echo \"Hello from Python workflow!\"'\n            }\n        ],\n        'stop_all_nodes': True\n    }\n\n# Run the workflow\nworkflow_config = create_test_workflow()\nresult = run_workflow(workflow_config)\nprint(f\"Workflow result: {result}\")\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Always handle errors properly\ndef safe_merobox_command(command):\n    """Run Merobox command with proper error handling."""\n    try:\n        result = subprocess.run(\n            [\'merobox\'] + command,\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        print(f"Command failed: {e}")\n        print(f"Error output: {e.stderr}")\n        return None\n    except FileNotFoundError:\n        print("Merobox not found. Please install it first.")\n        return None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-cleanup",children:"Resource Cleanup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Always clean up resources\ndef test_with_cleanup():\n    \"\"\"Test with proper cleanup.\"\"\"\n    try:\n        # Start nodes\n        subprocess.run(['merobox', 'run', '--count', '2'])\n\n        # Run tests\n        result = subprocess.run(['merobox', 'health'])\n        assert result.returncode == 0\n\n    finally:\n        # Always cleanup\n        subprocess.run(['merobox', 'stop', '--all'])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand basic Python integration with Merobox:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./node-management",children:"Node Management"})," - Complete node management guide"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./workflows",children:"Workflows"})," - Workflow system and automation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./environment-variables",children:"Environment Variables"})," - Configuration options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);