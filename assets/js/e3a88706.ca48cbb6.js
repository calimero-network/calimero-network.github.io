"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5193],{83545:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(30758);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},85518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"developer-tools/merobox/real-world-examples","title":"Real-World Examples","description":"Practical examples for common real-world scenarios with Merobox.","source":"@site/docs/05-developer-tools/merobox/real-world-examples.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/real-world-examples","permalink":"/developer-tools/merobox/real-world-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/real-world-examples.mdx","tags":[],"version":"current","lastUpdatedAt":1759330694000,"sidebarPosition":4.2,"frontMatter":{"title":"Real-World Examples","description":"Practical examples for common real-world scenarios with Merobox.","sidebar_position":4.2},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start Tutorials","permalink":"/developer-tools/merobox/quick-start-tutorials"},"next":{"title":"Testing Integration Examples","permalink":"/developer-tools/merobox/testing-integration-examples"}}');var a=t(86070),i=t(83545);const r={title:"Real-World Examples",description:"Practical examples for common real-world scenarios with Merobox.",sidebar_position:4.2},l="Real-World Examples",s={},d=[{value:"Example 1: Multi-Node Testing",id:"example-1-multi-node-testing",level:2},{value:"Example 2: Authentication Service Integration",id:"example-2-authentication-service-integration",level:2},{value:"Example 3: Performance Testing",id:"example-3-performance-testing",level:2},{value:"Example 4: Basic Error Handling",id:"example-4-basic-error-handling",level:2},{value:"Example 5: Parallel Operations",id:"example-5-parallel-operations",level:2},{value:"Best Practices for Real-World Examples",id:"best-practices-for-real-world-examples",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Validation",id:"3-validation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"real-world-examples",children:"Real-World Examples"})}),"\n",(0,a.jsx)(n.p,{children:"These examples demonstrate how to use Merobox for common real-world scenarios,\nfrom multi-node testing to basic performance testing."}),"\n",(0,a.jsx)(n.h2,{id:"example-1-multi-node-testing",children:"Example 1: Multi-Node Testing"}),"\n",(0,a.jsx)(n.p,{children:"Test your application across multiple nodes to simulate real-world scenarios."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Multi-node application testing\nname: Multi-Node Test\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: test-node\n\nsteps:\n  # Install application on first node\n  - name: Install Application\n    type: install_application\n    node: test-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  # Create context on first node\n  - name: Create Context\n    type: create_context\n    node: test-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  # Create identities on other nodes\n  - name: Create Identity on Node 2\n    type: create_identity\n    node: test-node-2\n    outputs:\n      node2_key: publicKey\n\n  - name: Create Identity on Node 3\n    type: create_identity\n    node: test-node-3\n    outputs:\n      node3_key: publicKey\n\n  # Invite nodes to context\n  - name: Invite Node 2\n    type: invite_identity\n    node: test-node-1\n    context_id: '{{context_id}}'\n    grantee_id: '{{node2_key}}'\n    granter_id: '{{member_key}}'\n    capability: member\n    outputs:\n      invite2: invitation\n\n  - name: Invite Node 3\n    type: invite_identity\n    node: test-node-1\n    context_id: '{{context_id}}'\n    grantee_id: '{{node3_key}}'\n    granter_id: '{{member_key}}'\n    capability: member\n    outputs:\n      invite3: invitation\n\n  # Join contexts\n  - name: Join from Node 2\n    type: join_context\n    node: test-node-2\n    context_id: '{{context_id}}'\n    invitee_id: '{{node2_key}}'\n    invitation: '{{invite2}}'\n\n  - name: Join from Node 3\n    type: join_context\n    node: test-node-3\n    context_id: '{{context_id}}'\n    invitee_id: '{{node3_key}}'\n    invitation: '{{invite3}}'\n\n  # Test cross-node communication\n  - name: Set Data from Node 1\n    type: call\n    node: test-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: set\n    args:\n      key: shared_data\n      value: 'set from node 1'\n\n  - name: Read from Node 2\n    type: call\n    node: test-node-2\n    context_id: '{{context_id}}'\n    executor_public_key: '{{node2_key}}'\n    method: get\n    args:\n      key: shared_data\n    outputs:\n      result2: result\n\n  - name: Read from Node 3\n    type: call\n    node: test-node-3\n    context_id: '{{context_id}}'\n    executor_public_key: '{{node3_key}}'\n    method: get\n    args:\n      key: shared_data\n    outputs:\n      result3: result\n\n  # Validate cross-node consistency\n  - name: Validate Cross-Node Data\n    type: assert\n    statements:\n      - \"contains({{result2}}, 'set from node 1')\"\n      - \"contains({{result3}}, 'set from node 1')\"\n      - '{{result2}} == {{result3}}'\n\nstop_all_nodes: true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-2-authentication-service-integration",children:"Example 2: Authentication Service Integration"}),"\n",(0,a.jsx)(n.p,{children:"Use Merobox with authentication services for production-like testing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'description: Workflow with authentication service\nname: Auth Service Example\n\n# Enable authentication service\nauth_service: true\n\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: auth-node\n\nsteps:\n  - name: Wait for Auth Service\n    type: wait\n    seconds: 10\n    message: \'Waiting for authentication service to start...\'\n\n  - name: Install Application\n    type: install_application\n    node: auth-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: auth-node-1\n    application_id: \'{{app_id}}\'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test with Auth Service\n    type: script\n    script: |\n      echo "Testing with authentication service..."\n      echo "Node 1 URL: http://auth-node-1.127.0.0.1.nip.io"\n      echo "Node 2 URL: http://auth-node-2.127.0.0.1.nip.io"\n      echo "Auth Login: http://auth-node-1.127.0.0.1.nip.io/auth/login"\n      echo "Admin Dashboard: http://auth-node-1.127.0.0.1.nip.io/admin-dashboard"\n\nstop_all_nodes: true\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-3-performance-testing",children:"Example 3: Performance Testing"}),"\n",(0,a.jsx)(n.p,{children:"Test your application's performance with repeated operations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Performance testing workflow\nname: Performance Test\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: perf-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: perf-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: perf-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Performance Test\n    type: repeat\n    count: 100\n    outputs:\n      iteration: iteration\n    steps:\n      - name: Set Data\n        type: call\n        node: perf-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: set\n        args:\n          key: 'perf_key_{{iteration}}'\n          value: 'perf_value_{{iteration}}'\n\n      - name: Get Data\n        type: call\n        node: perf-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: get\n        args:\n          key: 'perf_key_{{iteration}}'\n        outputs:\n          result: result\n\n      - name: Validate Performance\n        type: assert\n        statements:\n          - \"contains({{result}}, 'perf_value_{{iteration}}')\"\n\n  - name: Performance Summary\n    type: script\n    script: |\n      echo \"Performance test completed!\"\n      echo \"Executed 100 set/get operations successfully\"\n\nstop_all_nodes: true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-4-basic-error-handling",children:"Example 4: Basic Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"Implement basic error handling in your workflows."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Error handling example\nname: Error Handling Test\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: error-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: error-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: error-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test Error Handling\n    type: call\n    node: error-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test_error_handling\n    args:\n      should_fail: true\n    outputs:\n      error_result: result\n\n  - name: Validate Error Response\n    type: assert\n    statements:\n      - \"contains({{error_result}}, 'error')\"\n\n  - name: Recovery Test\n    type: call\n    node: error-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test_recovery\n    args:\n      should_succeed: true\n    outputs:\n      recovery_result: result\n\n  - name: Validate Recovery\n    type: assert\n    statements:\n      - \"contains({{recovery_result}}, 'success')\"\n\nstop_all_nodes: true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-5-parallel-operations",children:"Example 5: Parallel Operations"}),"\n",(0,a.jsx)(n.p,{children:"Execute multiple operations in parallel for improved performance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Parallel operations example\nname: Parallel Operations\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: parallel-node\n\nsteps:\n  - name: Install Applications in Parallel\n    type: parallel\n    steps:\n      - name: Install App 1\n        type: install_application\n        node: parallel-node-1\n        path: ./app1.wasm\n        dev: true\n        outputs:\n          app_id_1: applicationId\n\n      - name: Install App 2\n        type: install_application\n        node: parallel-node-2\n        path: ./app2.wasm\n        dev: true\n        outputs:\n          app_id_2: applicationId\n\n      - name: Install App 3\n        type: install_application\n        node: parallel-node-3\n        path: ./app3.wasm\n        dev: true\n        outputs:\n          app_id_3: applicationId\n\n  - name: Create Contexts in Parallel\n    type: parallel\n    steps:\n      - name: Create Context 1\n        type: create_context\n        node: parallel-node-1\n        application_id: '{{app_id_1}}'\n        outputs:\n          context_id_1: contextId\n          member_key_1: memberPublicKey\n\n      - name: Create Context 2\n        type: create_context\n        node: parallel-node-2\n        application_id: '{{app_id_2}}'\n        outputs:\n          context_id_2: contextId\n          member_key_2: memberPublicKey\n\n      - name: Create Context 3\n        type: create_context\n        node: parallel-node-3\n        application_id: '{{app_id_3}}'\n        outputs:\n          context_id_3: contextId\n          member_key_3: memberPublicKey\n\n  - name: Test All Applications\n    type: parallel\n    steps:\n      - name: Test App 1\n        type: call\n        node: parallel-node-1\n        context_id: '{{context_id_1}}'\n        executor_public_key: '{{member_key_1}}'\n        method: test_functionality\n        args:\n          test_data: 'app1_test'\n\n      - name: Test App 2\n        type: call\n        node: parallel-node-2\n        context_id: '{{context_id_2}}'\n        executor_public_key: '{{member_key_2}}'\n        method: test_functionality\n        args:\n          test_data: 'app2_test'\n\n      - name: Test App 3\n        type: call\n        node: parallel-node-3\n        context_id: '{{context_id_3}}'\n        executor_public_key: '{{member_key_3}}'\n        method: test_functionality\n        args:\n          test_data: 'app3_test'\n\nstop_all_nodes: true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-for-real-world-examples",children:"Best Practices for Real-World Examples"}),"\n",(0,a.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Use environment-specific settings\nnodes:\n  image: ghcr.io/calimero-network/merod:edge\n  environment:\n    RUST_LOG: info\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# Include basic error handling\nsteps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    method: risky_method\n    retry:\n      attempts: 3\n      delay: 5\n    on_error:\n      - name: Log Error\n        type: script\n        script: echo "Operation failed: {{error}}"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-validation",children:"3. Validation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Always validate results\nsteps:\n  - name: Validate Results\n    type: assert\n    statements:\n      - '{{result}} != null'\n      - \"contains({{result}}, 'expected_value')\"\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Now that you've seen real-world examples:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./testing-integration-examples",children:"Testing Integration Examples"})," - Integration\nwith testing frameworks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./advanced-examples",children:"Advanced Examples"})," - Complex workflows and advanced\nfeatures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);