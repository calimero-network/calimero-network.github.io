"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2085],{44415:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"developer-tools/merobox/workflow-advanced-features","title":"Workflow Advanced Features","description":"Advanced workflow features including conditional execution, parallel steps, and custom step types.","source":"@site/docs/05-developer-tools/merobox/workflow-advanced-features.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/workflow-advanced-features","permalink":"/developer-tools/merobox/workflow-advanced-features","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/workflow-advanced-features.mdx","tags":[],"version":"current","lastUpdatedAt":1757931844000,"sidebarPosition":7.5,"frontMatter":{"title":"Workflow Advanced Features","description":"Advanced workflow features including conditional execution, parallel steps, and custom step types.","sidebar_position":7.5},"sidebar":"tutorialSidebar","previous":{"title":"Authentication Service Integration","permalink":"/developer-tools/merobox/auth-service-integration"},"next":{"title":"Testing Framework Integration","permalink":"/developer-tools/merobox/testing-framework-integration"}}');var i=o(86070),a=o(48854);const l={title:"Workflow Advanced Features",description:"Advanced workflow features including conditional execution, parallel steps, and custom step types.",sidebar_position:7.5},r="Workflow Advanced Features",s={},c=[{value:"Conditional Execution",id:"conditional-execution",level:2},{value:"Basic Conditional Execution",id:"basic-conditional-execution",level:3},{value:"Advanced Conditional Logic",id:"advanced-conditional-logic",level:3},{value:"Complex Conditions",id:"complex-conditions",level:3},{value:"Parallel Step Execution",id:"parallel-step-execution",level:2},{value:"Basic Parallel Execution",id:"basic-parallel-execution",level:3},{value:"Parallel with Dependencies",id:"parallel-with-dependencies",level:3},{value:"Parallel with Limits",id:"parallel-with-limits",level:3},{value:"Error Handling and Recovery",id:"error-handling-and-recovery",level:2},{value:"Basic Error Handling",id:"basic-error-handling",level:3},{value:"Advanced Error Handling",id:"advanced-error-handling",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:3},{value:"Custom Step Types",id:"custom-step-types",level:2},{value:"Basic Custom Step",id:"basic-custom-step",level:3},{value:"Advanced Custom Step",id:"advanced-custom-step",level:3},{value:"Custom Step with Dependencies",id:"custom-step-with-dependencies",level:3},{value:"Dynamic Variables and Templating",id:"dynamic-variables-and-templating",level:2},{value:"Variable Substitution",id:"variable-substitution",level:3},{value:"Template Processing",id:"template-processing",level:3},{value:"Workflow Composition",id:"workflow-composition",level:2},{value:"Sub-workflows",id:"sub-workflows",level:3},{value:"Workflow Inheritance",id:"workflow-inheritance",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Workflow Optimization",id:"workflow-optimization",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Workflow Design",id:"workflow-design",level:3},{value:"Step Organization",id:"step-organization",level:3},{value:"Error Recovery",id:"error-recovery",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"workflow-advanced-features",children:"Workflow Advanced Features"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers advanced workflow features in Merobox, including conditional\nexecution, parallel step execution, error handling, and custom step types."}),"\n",(0,i.jsx)(n.h2,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,i.jsx)(n.p,{children:"Execute steps conditionally based on variables, environment, or previous step\nresults:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-conditional-execution",children:"Basic Conditional Execution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Check Condition\n    type: script\n    script: |\n      if [ "$ENVIRONMENT" = "production" ]; then\n        echo "true" > /tmp/condition\n      else\n        echo "false" > /tmp/condition\n      fi\n    outputs:\n      condition: output\n\n  - name: Production Step\n    type: call\n    node: calimero-node-1\n    condition: "{{condition}} == \'true\'"\n    method: production_method\n    args:\n      - \'production_value\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-conditional-logic",children:"Advanced Conditional Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Environment Check\n    type: script\n    script: |\n      case "$ENVIRONMENT" in\n        "production")\n          echo "prod" > /tmp/env_type\n          echo "true" > /tmp/use_ssl\n          ;;\n        "staging")\n          echo "staging" > /tmp/env_type\n          echo "true" > /tmp/use_ssl\n          ;;\n        "development")\n          echo "dev" > /tmp/env_type\n          echo "false" > /tmp/use_ssl\n          ;;\n        *)\n          echo "unknown" > /tmp/env_type\n          echo "false" > /tmp/use_ssl\n          ;;\n      esac\n    outputs:\n      env_type: output\n      use_ssl: output\n\n  - name: Configure SSL\n    type: script\n    condition: "{{use_ssl}} == \'true\'"\n    script: |\n      echo "Configuring SSL for {{env_type}} environment"\n      # SSL configuration logic here\n\n  - name: Configure Development\n    type: script\n    condition: "{{env_type}} == \'dev\'"\n    script: |\n      echo "Configuring development settings"\n      # Development configuration logic here\n'})}),"\n",(0,i.jsx)(n.h3,{id:"complex-conditions",children:"Complex Conditions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Multi-Condition Check\n    type: script\n    script: |\n      # Check multiple conditions\n      if [ "$ENVIRONMENT" = "production" ] && [ "$FEATURE_FLAG" = "enabled" ]; then\n        echo "true" > /tmp/complex_condition\n      else\n        echo "false" > /tmp/complex_condition\n      fi\n    outputs:\n      complex_condition: output\n\n  - name: Complex Step\n    type: call\n    node: calimero-node-1\n    condition: "{{complex_condition}} == \'true\'"\n    method: complex_method\n'})}),"\n",(0,i.jsx)(n.h2,{id:"parallel-step-execution",children:"Parallel Step Execution"}),"\n",(0,i.jsx)(n.p,{children:"Execute multiple steps in parallel for improved performance:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-parallel-execution",children:"Basic Parallel Execution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Parallel Operations\n    type: parallel\n    steps:\n      - name: Install App 1\n        type: install_application\n        node: calimero-node-1\n        path: ./app1.wasm\n      - name: Install App 2\n        type: install_application\n        node: calimero-node-2\n        path: ./app2.wasm\n      - name: Create Identity\n        type: create_identity\n        node: calimero-node-3\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parallel-with-dependencies",children:"Parallel with Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Setup Phase\n    type: parallel\n    steps:\n      - name: Create Node 1\n        type: create_node\n        name: calimero-node-1\n      - name: Create Node 2\n        type: create_node\n        name: calimero-node-2\n      - name: Create Node 3\n        type: create_node\n        name: calimero-node-3\n\n  - name: Configuration Phase\n    type: parallel\n    depends_on: [Setup Phase]\n    steps:\n      - name: Configure Node 1\n        type: configure_node\n        node: calimero-node-1\n      - name: Configure Node 2\n        type: configure_node\n        node: calimero-node-2\n      - name: Configure Node 3\n        type: configure_node\n        node: calimero-node-3\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parallel-with-limits",children:"Parallel with Limits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Parallel with Limits\n    type: parallel\n    max_concurrent: 3\n    steps:\n      - name: Install App 1\n        type: install_application\n        node: calimero-node-1\n        path: ./app1.wasm\n      - name: Install App 2\n        type: install_application\n        node: calimero-node-2\n        path: ./app2.wasm\n      - name: Install App 3\n        type: install_application\n        node: calimero-node-3\n        path: ./app3.wasm\n      - name: Install App 4\n        type: install_application\n        node: calimero-node-4\n        path: ./app4.wasm\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-and-recovery",children:"Error Handling and Recovery"}),"\n",(0,i.jsx)(n.p,{children:"Implement robust error handling and recovery mechanisms:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-error-handling",children:"Basic Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    method: risky_method\n    retry:\n      attempts: 3\n      delay: 5\n      backoff: exponential\n    on_error:\n      - name: Log Error\n        type: script\n        script: echo "Operation failed: {{error}}"\n      - name: Cleanup\n        type: script\n        script: echo "Cleaning up..."\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-error-handling",children:"Advanced Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Complex Operation\n    type: call\n    node: calimero-node-1\n    method: complex_method\n    retry:\n      attempts: 5\n      delay: 10\n      backoff: exponential\n      max_delay: 300\n    on_error:\n      - name: Log Error Details\n        type: script\n        script: |\n          echo "Error: {{error}}"\n          echo "Node: {{node}}"\n          echo "Method: {{method}}"\n          echo "Timestamp: $(date)"\n        outputs:\n          error_log: output\n      - name: Notify Admin\n        type: script\n        condition: "{{error_log}} contains \'critical\'"\n        script: |\n          echo "Critical error detected, notifying admin"\n          # Send notification\n      - name: Rollback\n        type: script\n        condition: "{{error_log}} contains \'rollback\'"\n        script: |\n          echo "Rolling back changes"\n          # Rollback logic\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Operation with Recovery\n    type: call\n    node: calimero-node-1\n    method: operation_with_recovery\n    retry:\n      attempts: 3\n      delay: 5\n      backoff: linear\n    on_error:\n      - name: Check Node Health\n        type: script\n        script: |\n          if ! docker exec calimero-node-1 curl -f http://localhost:2428/health; then\n            echo "Node is unhealthy, restarting..."\n            docker restart calimero-node-1\n            sleep 30\n          fi\n        outputs:\n          node_restarted: output\n      - name: Retry Operation\n        type: call\n        condition: "{{node_restarted}} == \'true\'"\n        node: calimero-node-1\n        method: operation_with_recovery\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-step-types",children:"Custom Step Types"}),"\n",(0,i.jsx)(n.p,{children:"Define custom step types for specialized operations:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-custom-step",children:"Basic Custom Step"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# custom-steps.yml\nstep_types:\n  custom_deploy:\n    required_fields: [node, application, environment]\n    optional_fields: [config, timeout]\n    execute: |\n      # Custom deployment logic\n      echo \"Deploying {{application}} to {{environment}} on {{node}}\"\n\n      # Set timeout if provided\n      if [ -n \"{{timeout}}\" ]; then\n        timeout {{timeout}} deploy_command\n      else\n        deploy_command\n      fi\n    outputs:\n      deployment_id: '{{deployment_id}}'\n      status: '{{deployment_status}}'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-custom-step",children:"Advanced Custom Step"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# advanced-custom-steps.yml\nstep_types:\n  database_migration:\n    required_fields: [node, migration_file, target_database]\n    optional_fields: [rollback_file, backup_before, dry_run]\n    validate:\n      - field: migration_file\n        type: file\n        exists: true\n        extension: [.sql, .migration]\n      - field: target_database\n        type: string\n        pattern: \'^[a-zA-Z0-9_-]+$\'\n    execute: |\n      # Validate migration file\n      if [ ! -f "{{migration_file}}" ]; then\n        echo "Migration file not found: {{migration_file}}"\n        exit 1\n      fi\n\n      # Create backup if requested\n      if [ "{{backup_before}}" = "true" ]; then\n        echo "Creating backup of {{target_database}}"\n        backup_command --database {{target_database}}\n      fi\n\n      # Run migration\n      if [ "{{dry_run}}" = "true" ]; then\n        echo "Dry run: Would execute {{migration_file}}"\n        echo "migration_id=dry_run_{{timestamp}}"\n        echo "status=dry_run"\n      else\n        echo "Executing migration: {{migration_file}}"\n        migration_result=$(migrate_command --file {{migration_file}} --database {{target_database}})\n        echo "migration_id={{migration_result.id}}"\n        echo "status={{migration_result.status}}"\n      fi\n    outputs:\n      migration_id: \'{{migration_id}}\'\n      status: \'{{status}}\'\n      backup_file: \'{{backup_file}}\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-step-with-dependencies",children:"Custom Step with Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# custom-step-with-deps.yml\nstep_types:\n  conditional_deploy:\n    required_fields: [node, application]\n    optional_fields: [condition, environment, config]\n    dependencies: [check_condition, validate_environment]\n    execute: |\n      # Check if condition is met\n      if [ "{{condition}}" != "true" ]; then\n        echo "Condition not met, skipping deployment"\n        echo "status=skipped"\n        exit 0\n      fi\n\n      # Validate environment\n      if [ -n "{{environment}}" ]; then\n        if [ "{{environment}}" != "production" ] && [ "{{environment}}" != "staging" ]; then\n          echo "Invalid environment: {{environment}}"\n          exit 1\n        fi\n      fi\n\n      # Deploy application\n      echo "Deploying {{application}} to {{node}}"\n      deploy_result=$(deploy_command --app {{application}} --node {{node}} --env {{environment}})\n      echo "deployment_id={{deploy_result.id}}"\n      echo "status={{deploy_result.status}}"\n    outputs:\n      deployment_id: \'{{deployment_id}}\'\n      status: \'{{status}}\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-variables-and-templating",children:"Dynamic Variables and Templating"}),"\n",(0,i.jsx)(n.h3,{id:"variable-substitution",children:"Variable Substitution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Generate Dynamic Values\n    type: script\n    script: |\n      # Generate timestamp\n      echo "$(date +%s)" > /tmp/timestamp\n\n      # Generate random ID\n      echo "$(uuidgen)" > /tmp/random_id\n\n      # Generate environment-specific values\n      case "$ENVIRONMENT" in\n        "production")\n          echo "prod" > /tmp/env_prefix\n          echo "1000" > /tmp/timeout\n          ;;\n        "staging")\n          echo "staging" > /tmp/env_prefix\n          echo "500" > /tmp/timeout\n          ;;\n        *)\n          echo "dev" > /tmp/env_prefix\n          echo "100" > /tmp/timeout\n          ;;\n      esac\n    outputs:\n      timestamp: output\n      random_id: output\n      env_prefix: output\n      timeout: output\n\n  - name: Use Dynamic Values\n    type: call\n    node: calimero-node-1\n    method: dynamic_method\n    args:\n      - \'{{env_prefix}}_{{random_id}}\'\n      - \'{{timestamp}}\'\n      - \'{{timeout}}\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"template-processing",children:"Template Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Process Template\n    type: script\n    script: |\n      # Process configuration template\n      envsubst < config.template > config.yml\n\n      # Replace placeholders\n      sed -i "s/{{NODE_NAME}}/calimero-node-1/g" config.yml\n      sed -i "s/{{ENVIRONMENT}}/$ENVIRONMENT/g" config.yml\n      sed -i "s/{{TIMESTAMP}}/$(date +%s)/g" config.yml\n    outputs:\n      config_file: \'config.yml\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"workflow-composition",children:"Workflow Composition"}),"\n",(0,i.jsx)(n.h3,{id:"sub-workflows",children:"Sub-workflows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# main-workflow.yml\nsteps:\n  - name: Setup Infrastructure\n    type: workflow\n    file: workflows/setup-infrastructure.yml\n    inputs:\n      node_count: 3\n      environment: '{{ENVIRONMENT}}'\n    outputs:\n      node_endpoints: output\n\n  - name: Deploy Applications\n    type: workflow\n    file: workflows/deploy-applications.yml\n    depends_on: [Setup Infrastructure]\n    inputs:\n      node_endpoints: '{{node_endpoints}}'\n      applications: ['app1', 'app2', 'app3']\n    outputs:\n      deployment_status: output\n\n  - name: Run Tests\n    type: workflow\n    file: workflows/run-tests.yml\n    depends_on: [Deploy Applications]\n    inputs:\n      node_endpoints: '{{node_endpoints}}'\n      test_suite: 'integration'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"workflow-inheritance",children:"Workflow Inheritance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# base-workflow.yml\nname: Base Workflow\ndescription: Common workflow steps\n\nsteps:\n  - name: Common Setup\n    type: script\n    script: echo "Common setup logic"\n\n  - name: Common Cleanup\n    type: script\n    script: echo "Common cleanup logic"\n\n# specialized-workflow.yml\nname: Specialized Workflow\nextends: base-workflow.yml\n\nsteps:\n  - name: Specialized Step\n    type: call\n    node: calimero-node-1\n    method: specialized_method\n    # Inserted between Common Setup and Common Cleanup\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"workflow-optimization",children:"Workflow Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Optimized workflow\nsteps:\n  - name: Parallel Setup\n    type: parallel\n    max_concurrent: 4\n    steps:\n      - name: Setup Node 1\n        type: create_node\n        name: calimero-node-1\n      - name: Setup Node 2\n        type: create_node\n        name: calimero-node-2\n      - name: Setup Node 3\n        type: create_node\n        name: calimero-node-3\n      - name: Setup Node 4\n        type: create_node\n        name: calimero-node-4\n\n  - name: Optimized Deployment\n    type: parallel\n    max_concurrent: 2\n    steps:\n      - name: Deploy to Nodes 1-2\n        type: parallel\n        steps:\n          - name: Deploy App 1\n            type: install_application\n            node: calimero-node-1\n            path: ./app1.wasm\n          - name: Deploy App 2\n            type: install_application\n            node: calimero-node-2\n            path: ./app2.wasm\n      - name: Deploy to Nodes 3-4\n        type: parallel\n        steps:\n          - name: Deploy App 3\n            type: install_application\n            node: calimero-node-3\n            path: ./app3.wasm\n          - name: Deploy App 4\n            type: install_application\n            node: calimero-node-4\n            path: ./app4.wasm\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"workflow-design",children:"Workflow Design"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modularity"}),": Break complex workflows into smaller, reusable components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Implement comprehensive error handling and recovery"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Use parallel execution where possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing"}),": Test workflows thoroughly before production use"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-organization",children:"Step Organization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical Grouping"}),": Group related steps together"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependencies"}),": Clearly define step dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Outputs"}),": Use meaningful output names and descriptions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Document complex custom steps"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"error-recovery",children:"Error Recovery"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry Logic"}),": Implement appropriate retry mechanisms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rollback"}),": Plan for rollback scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring"}),": Monitor workflow execution and failures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Alerting"}),": Set up alerts for critical failures"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand workflow advanced features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./testing-framework-integration",children:"Testing Framework Integration"})," - Testing\nwith Merobox"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./resource-management",children:"Resource Management"})," - Resource limits and monitoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./security-configuration",children:"Security Configuration"})," - Security settings and\npolicies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./advanced-configuration",children:"Advanced Configuration"})," - Other advanced features"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},48854:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var t=o(30758);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);