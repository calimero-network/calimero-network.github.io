"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5443],{48854:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(30758);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},61552:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"developer-tools/merobox/best-practices","title":"Best Practices","description":"Guidelines and best practices for effective Merobox usage.","source":"@site/docs/05-developer-tools/merobox/best-practices.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/best-practices","permalink":"/developer-tools/merobox/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/best-practices.mdx","tags":[],"version":"current","lastUpdatedAt":1757979038000,"sidebarPosition":4.5,"frontMatter":{"title":"Best Practices","description":"Guidelines and best practices for effective Merobox usage.","sidebar_position":4.5},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Examples","permalink":"/developer-tools/merobox/advanced-examples"},"next":{"title":"Python Customization","permalink":"/developer-tools/merobox/python-customization"}}');var o=i(86070),s=i(48854);const r={title:"Best Practices",description:"Guidelines and best practices for effective Merobox usage.",sidebar_position:4.5},a="Best Practices",l={},c=[{value:"Workflow Design",id:"workflow-design",level:2},{value:"1. Start Simple",id:"1-start-simple",level:3},{value:"2. Modular Steps",id:"2-modular-steps",level:3},{value:"3. Clear Naming",id:"3-clear-naming",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"Testing Integration",id:"testing-integration",level:2},{value:"1. Isolated Tests",id:"1-isolated-tests",level:3},{value:"2. Resource Cleanup",id:"2-resource-cleanup",level:3},{value:"3. Parallel Testing",id:"3-parallel-testing",level:3},{value:"4. Environment Setup",id:"4-environment-setup",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"1. Minimal Waits",id:"1-minimal-waits",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"3. Efficient Operations",id:"3-efficient-operations",level:3},{value:"4. Monitoring",id:"4-monitoring",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"1. Use Non-Root Users",id:"1-use-non-root-users",level:3},{value:"2. Drop Unnecessary Capabilities",id:"2-drop-unnecessary-capabilities",level:3},{value:"3. Use Secrets Management",id:"3-use-secrets-management",level:3},{value:"4. Network Segmentation",id:"4-network-segmentation",level:3},{value:"Configuration Management",id:"configuration-management",level:2},{value:"1. Environment-Specific Configuration",id:"1-environment-specific-configuration",level:3},{value:"2. Version Control",id:"2-version-control",level:3},{value:"3. Configuration Validation",id:"3-configuration-validation",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"1. Comprehensive Monitoring",id:"1-comprehensive-monitoring",level:3},{value:"2. Logging",id:"2-logging",level:3},{value:"3. Health Checks",id:"3-health-checks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"1. Debug Mode",id:"1-debug-mode",level:3},{value:"2. Resource Monitoring",id:"2-resource-monitoring",level:3},{value:"3. Network Diagnostics",id:"3-network-diagnostics",level:3},{value:"Documentation",id:"documentation",level:2},{value:"1. Document Workflows",id:"1-document-workflows",level:3},{value:"2. Document Configuration",id:"2-document-configuration",level:3},{value:"3. Document Dependencies",id:"3-document-dependencies",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"1. Resource Exhaustion",id:"1-resource-exhaustion",level:3},{value:"2. Network Issues",id:"2-network-issues",level:3},{value:"3. Timing Issues",id:"3-timing-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides comprehensive best practices for using Merobox effectively,\nfrom workflow design to testing integration and performance optimization."}),"\n",(0,o.jsx)(n.h2,{id:"workflow-design",children:"Workflow Design"}),"\n",(0,o.jsx)(n.h3,{id:"1-start-simple",children:"1. Start Simple"}),"\n",(0,o.jsx)(n.p,{children:"Begin with basic workflows and gradually add complexity:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Start with simple workflows\ndescription: Simple workflow\nname: Basic Workflow\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n\nsteps:\n  - name: Basic Step\n    type: script\n    script: echo "Hello, Merobox!"\n\nstop_all_nodes: true\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-modular-steps",children:"2. Modular Steps"}),"\n",(0,o.jsx)(n.p,{children:"Break complex operations into smaller, focused steps:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Good: Modular approach\nsteps:\n  - name: Setup Environment\n    type: script\n    script: |\n      echo "Setting up environment..."\n      # Setup logic\n\n  - name: Install Application\n    type: install_application\n    node: calimero-node-1\n    path: ./my-app.wasm\n\n  - name: Configure Application\n    type: script\n    script: |\n      echo "Configuring application..."\n      # Configuration logic\n\n  - name: Test Application\n    type: call\n    node: calimero-node-1\n    method: test_functionality\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-clear-naming",children:"3. Clear Naming"}),"\n",(0,o.jsx)(n.p,{children:"Use descriptive names for steps and variables:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Good: Descriptive names\nsteps:\n  - name: Install User Management Application\n    type: install_application\n    node: calimero-node-1\n    path: ./user-mgmt.wasm\n    outputs:\n      user_app_id: applicationId\n\n  - name: Create User Management Context\n    type: create_context\n    node: calimero-node-1\n    application_id: '{{user_app_id}}'\n    outputs:\n      user_context_id: contextId\n      admin_key: memberPublicKey\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,o.jsx)(n.p,{children:"Include validation and error checking steps:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    method: risky_method\n    retry:\n      attempts: 3\n      delay: 5\n      backoff: exponential\n    on_error:\n      - name: Log Error\n        type: script\n        script: echo "Operation failed: {{error}}"\n      - name: Cleanup\n        type: script\n        script: echo "Cleaning up..."\n\n  - name: Validate Results\n    type: assert\n    statements:\n      - \'{{result}} != null\'\n      - "contains({{result}}, \'expected_value\')"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"testing-integration",children:"Testing Integration"}),"\n",(0,o.jsx)(n.h3,{id:"1-isolated-tests",children:"1. Isolated Tests"}),"\n",(0,o.jsx)(n.p,{children:"Use separate node prefixes for different test suites:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Use different prefixes for isolation\n@pytest.fixture\ndef unit_test_cluster():\n    with cluster(count=1, prefix="unit") as env:\n        yield env\n\n@pytest.fixture\ndef integration_test_cluster():\n    with cluster(count=3, prefix="integration") as env:\n        yield env\n\n@pytest.fixture\ndef performance_test_cluster():\n    with cluster(count=5, prefix="performance") as env:\n        yield env\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-resource-cleanup",children:"2. Resource Cleanup"}),"\n",(0,o.jsx)(n.p,{children:"Always clean up resources after tests:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@pytest.fixture\ndef test_cluster():\n    with cluster(count=2, prefix="test") as env:\n        try:\n            yield env\n        finally:\n            # Cleanup logic\n            print("Cleaning up test resources...")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-parallel-testing",children:"3. Parallel Testing"}),"\n",(0,o.jsx)(n.p,{children:"Use different prefixes for parallel test execution:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Enable parallel testing\npytestmark = pytest.mark.parallel\n\ndef test_parallel_1():\n    with cluster(count=1, prefix="parallel-1") as env:\n        # Test logic\n        pass\n\ndef test_parallel_2():\n    with cluster(count=1, prefix="parallel-2") as env:\n        # Test logic\n        pass\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-environment-setup",children:"4. Environment Setup"}),"\n",(0,o.jsx)(n.p,{children:"Use workflows for complex test environment setup:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# workflows/test-setup.yml\ndescription: Test environment setup\nname: Test Setup\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: test-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: test-node-1\n    path: ./test-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: test-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Setup Test Data\n    type: call\n    node: test-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: setup_test_data\n    args:\n      test_cases: 100\n\nstop_all_nodes: false # Keep nodes running for tests\n"})}),"\n",(0,o.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsx)(n.h3,{id:"1-minimal-waits",children:"1. Minimal Waits"}),"\n",(0,o.jsx)(n.p,{children:"Use appropriate wait times, not excessive delays:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Good: Minimal wait times\nsteps:\n  - name: Wait for Node\n    type: wait\n    seconds: 5  # Reasonable wait time\n    message: 'Waiting for node to start...'\n\n# Bad: Excessive wait times\nsteps:\n  - name: Wait for Node\n    type: wait\n    seconds: 300  # Too long!\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,o.jsx)(n.p,{children:"Stop nodes when not needed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Good: Stop nodes when done\nstop_all_nodes: true\n\n# Or stop specific nodes\nsteps:\n  - name: Stop Unused Nodes\n    type: script\n    script: |\n      merobox stop calimero-node-2\n      merobox stop calimero-node-3\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-efficient-operations",children:"3. Efficient Operations"}),"\n",(0,o.jsx)(n.p,{children:"Design workflows to minimize sequential dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Good: Parallel operations\nsteps:\n  - name: Parallel Setup\n    type: parallel\n    steps:\n      - name: Setup Node 1\n        type: script\n        script: echo "Setting up node 1"\n      - name: Setup Node 2\n        type: script\n        script: echo "Setting up node 2"\n      - name: Setup Node 3\n        type: script\n        script: echo "Setting up node 3"\n\n# Bad: Sequential operations\nsteps:\n  - name: Setup Node 1\n    type: script\n    script: echo "Setting up node 1"\n  - name: Setup Node 2\n    type: script\n    script: echo "Setting up node 2"\n  - name: Setup Node 3\n    type: script\n    script: echo "Setting up node 3"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-monitoring",children:"4. Monitoring"}),"\n",(0,o.jsx)(n.p,{children:"Include health checks and monitoring in long-running workflows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Health Check\n    type: script\n    script: |\n      echo "Checking node health..."\n      curl -f http://calimero-node-1:2428/health\n      echo "Node is healthy"\n\n  - name: Monitor Performance\n    type: script\n    script: |\n      echo "Monitoring performance..."\n      # Add monitoring logic\n'})}),"\n",(0,o.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-use-non-root-users",children:"1. Use Non-Root Users"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"nodes:\n  security:\n    user: '1000:1000' # Non-root user\n    read_only: true\n    no_new_privileges: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-drop-unnecessary-capabilities",children:"2. Drop Unnecessary Capabilities"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"nodes:\n  security:\n    capabilities:\n      drop: ['ALL']\n      add: ['NET_BIND_SERVICE'] # Only add what's needed\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-use-secrets-management",children:"3. Use Secrets Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"secrets:\n  - name: api-key\n    environment: API_KEY\n    required: true\n\nnodes:\n  secrets:\n    - api-key\n  environment:\n    API_KEY_FILE: /run/secrets/api-key\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-network-segmentation",children:"4. Network Segmentation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"networks:\n  - name: calimero-internal\n    driver: bridge\n    options:\n      com.docker.network.bridge.enable_icc: 'false'\n      com.docker.network.bridge.enable_ip_masquerade: 'true'\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,o.jsx)(n.h3,{id:"1-environment-specific-configuration",children:"1. Environment-Specific Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Use different configurations for different environments\ndevelopment:\n  nodes:\n    count: 1\n    resources:\n      memory: '1G'\n      cpus: '0.5'\n  security:\n    read_only: false\n\nproduction:\n  nodes:\n    count: 5\n    resources:\n      memory: '4G'\n      cpus: '2.0'\n  security:\n    read_only: true\n    no_new_privileges: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-version-control",children:"2. Version Control"}),"\n",(0,o.jsx)(n.p,{children:"Track configuration changes in version control:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Track workflow files\ngit add workflows/\ngit commit -m "Add new workflow configuration"\n\n# Track environment files\ngit add .env.example\ngit commit -m "Update environment configuration"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-configuration-validation",children:"3. Configuration Validation"}),"\n",(0,o.jsx)(n.p,{children:"Validate configuration before deployment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Validate Configuration\n    type: script\n    script: |\n      echo "Validating configuration..."\n      # Add validation logic\n      echo "Configuration is valid"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,o.jsx)(n.h3,{id:"1-comprehensive-monitoring",children:"1. Comprehensive Monitoring"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"monitoring:\n  enabled: true\n  metrics:\n    - cpu_usage\n    - memory_usage\n    - disk_usage\n    - network_io\n    - application_metrics\n  alerts:\n    - metric: memory_usage\n      threshold: 80\n      action: restart_node\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-logging",children:"2. Logging"}),"\n",(0,o.jsx)(n.p,{children:"Include comprehensive logging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Log Important Events\n    type: script\n    script: |\n      echo "Starting important operation..."\n      # Operation logic\n      echo "Operation completed successfully"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-health-checks",children:"3. Health Checks"}),"\n",(0,o.jsx)(n.p,{children:"Include health checks in workflows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: Health Check\n    type: script\n    script: |\n      echo "Performing health check..."\n      curl -f http://calimero-node-1:2428/health\n      echo "Health check passed"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"1-debug-mode",children:"1. Debug Mode"}),"\n",(0,o.jsx)(n.p,{children:"Enable debug mode for troubleshooting:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Enable debug logging\nexport LOG_LEVEL=DEBUG\n\n# Run with verbose output\nmerobox bootstrap run workflow.yml --verbose\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-resource-monitoring",children:"2. Resource Monitoring"}),"\n",(0,o.jsx)(n.p,{children:"Monitor resource usage:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Check resource usage\ndocker stats $(docker ps -q --filter "name=calimero-")\n\n# Check logs\nmerobox logs calimero-node-1\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-network-diagnostics",children:"3. Network Diagnostics"}),"\n",(0,o.jsx)(n.p,{children:"Diagnose network issues:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check network connectivity\ndocker network ls\ndocker network inspect calimero-web\n\n# Test connectivity\ndocker exec calimero-node-1 ping calimero-node-2\n"})}),"\n",(0,o.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,o.jsx)(n.h3,{id:"1-document-workflows",children:"1. Document Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Include comprehensive documentation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: |\n  This workflow demonstrates how to set up a multi-node\n  Calimero cluster with authentication service integration.\n  It includes error handling, monitoring, and cleanup.\nname: Multi-Node Auth Setup\n# ... workflow steps\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-document-configuration",children:"2. Document Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Document configuration options:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configuration documentation\nnodes:\n  # Number of nodes to create\n  count: 3\n\n  # Docker image to use\n  image: ghcr.io/calimero-network/merod:edge\n\n  # Resource limits\n  resources:\n    memory: '2G' # Memory limit per node\n    cpus: '1.0' # CPU limit per node\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-document-dependencies",children:"3. Document Dependencies"}),"\n",(0,o.jsx)(n.p,{children:"Document external dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# External dependencies\n# - Docker must be running\n# - Ports 2428, 2528, 2628 must be available\n# - At least 4GB RAM and 2 CPU cores recommended\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,o.jsx)(n.h3,{id:"1-resource-exhaustion",children:"1. Resource Exhaustion"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Not enough resources for the workload."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Monitor resource usage and scale appropriately."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Monitor resources\nmonitoring:\n  enabled: true\n  metrics:\n    - memory_usage\n    - cpu_usage\n  alerts:\n    - metric: memory_usage\n      threshold: 80\n      action: scale_up\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-network-issues",children:"2. Network Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Nodes can't communicate with each other."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Check network configuration and connectivity."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Proper network configuration\nnetworks:\n  - name: calimero-web\n    driver: bridge\n    options:\n      com.docker.network.bridge.enable_icc: 'true'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-timing-issues",children:"3. Timing Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Operations fail due to timing issues."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use appropriate wait times and retry logic."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Proper timing\nsteps:\n  - name: Wait for Node\n    type: wait\n    seconds: 10\n    message: 'Waiting for node to start...'\n\n  - name: Retry Operation\n    type: call\n    node: calimero-node-1\n    method: operation\n    retry:\n      attempts: 3\n      delay: 5\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Now that you understand best practices:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./quick-start-tutorials",children:"Quick Start Tutorials"})," - Get started with Merobox"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./real-world-examples",children:"Real-World Examples"})," - Practical examples for common\nscenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./testing-integration-examples",children:"Testing Integration Examples"})," - Integration\nwith testing frameworks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./advanced-examples",children:"Advanced Examples"})," - Complex workflows and advanced\nfeatures"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);