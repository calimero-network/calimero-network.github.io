"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2871],{28575:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>_,frontMatter:()=>c,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"tutorials/python-client-integration","title":"Python Client Integration","description":"Complete tutorial on integrating the Calimero Python client SDK into your applications, from basic setup to advanced patterns.","source":"@site/docs/06-tutorials/08-python-client-integration.mdx","sourceDirName":"06-tutorials","slug":"/tutorials/python-client-integration","permalink":"/tutorials/python-client-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/06-tutorials/08-python-client-integration.mdx","tags":[],"version":"current","lastUpdatedAt":1757979038000,"sidebarPosition":8,"frontMatter":{"title":"Python Client Integration","description":"Complete tutorial on integrating the Calimero Python client SDK into your applications, from basic setup to advanced patterns.","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Blockchain interaction with Proxy Contract","permalink":"/tutorials/proxy-contract-interaction"},"next":{"title":"The Data Sovereignty Manifesto","permalink":"/resources/manifesto"}}');var a=t(86070),o=t(48854);const c={title:"Python Client Integration",description:"Complete tutorial on integrating the Calimero Python client SDK into your applications, from basic setup to advanced patterns.",sidebar_position:8},r="Python Client Integration",l={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Installation and Setup",id:"step-1-installation-and-setup",level:2},{value:"Install the Python Client",id:"install-the-python-client",level:3},{value:"Verify Installation",id:"verify-installation",level:3},{value:"Step 2: Basic Connection and Operations",id:"step-2-basic-connection-and-operations",level:2},{value:"Create a Connection",id:"create-a-connection",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Step 3: Application Management",id:"step-3-application-management",level:2},{value:"Install and Manage Applications",id:"install-and-manage-applications",level:3},{value:"Development Application Installation",id:"development-application-installation",level:3},{value:"Step 4: Context Management",id:"step-4-context-management",level:2},{value:"Create and Manage Contexts",id:"create-and-manage-contexts",level:3},{value:"Context Invitations and Joining",id:"context-invitations-and-joining",level:3},{value:"Step 5: Function Execution",id:"step-5-function-execution",level:2},{value:"Execute Smart Contract Functions",id:"execute-smart-contract-functions",level:3},{value:"Batch Function Execution",id:"batch-function-execution",level:3},{value:"Step 6: Advanced Patterns",id:"step-6-advanced-patterns",level:2},{value:"Custom Client Wrapper",id:"custom-client-wrapper",level:3},{value:"Monitoring and Health Checks",id:"monitoring-and-health-checks",level:3},{value:"Step 7: Integration with Web Frameworks",id:"step-7-integration-with-web-frameworks",level:2},{value:"FastAPI Integration",id:"fastapi-integration",level:3},{value:"Django Integration",id:"django-integration",level:3},{value:"Step 8: Testing",id:"step-8-testing",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Step 9: Production Deployment",id:"step-9-production-deployment",level:2},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Production Client",id:"production-client",level:3},{value:"Step 10: Best Practices and Tips",id:"step-10-best-practices-and-tips",level:2},{value:"1. Connection Management",id:"1-connection-management",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"4. Testing",id:"4-testing",level:3},{value:"5. Monitoring",id:"5-monitoring",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Resources",id:"resources",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"python-client-integration",children:"Python Client Integration"})}),"\n",(0,a.jsx)(e.p,{children:"This tutorial walks you through integrating the Calimero Python client SDK into\nyour applications, from basic setup to advanced patterns and real-world use\ncases."}),"\n",(0,a.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(e.p,{children:"Before starting this tutorial, ensure you have:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Python 3.9+"})," installed"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"pip"})," package manager"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Basic Python knowledge"})," (async/await, error handling)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Calimero node"})," running locally or remotely"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Basic understanding"})," of Calimero concepts (contexts, applications,\nfunctions)"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"step-1-installation-and-setup",children:"Step 1: Installation and Setup"}),"\n",(0,a.jsx)(e.h3,{id:"install-the-python-client",children:"Install the Python Client"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install calimero-client-py\n"})}),"\n",(0,a.jsx)(e.h3,{id:"verify-installation",children:"Verify Installation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# test_installation.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def test_installation():\n    """Test that the Python client is properly installed."""\n    try:\n        connection = create_connection("http://localhost:2528", AuthMode.NONE)\n        client = create_client(connection)\n        print("\u2713 Python client installed successfully!")\n        return True\n    except Exception as e:\n        print(f"\u2717 Installation test failed: {e}")\n        return False\n\nif __name__ == "__main__":\n    asyncio.run(test_installation())\n'})}),"\n",(0,a.jsx)(e.p,{children:"Run the test:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"python test_installation.py\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-2-basic-connection-and-operations",children:"Step 2: Basic Connection and Operations"}),"\n",(0,a.jsx)(e.h3,{id:"create-a-connection",children:"Create a Connection"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# basic_connection.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def basic_connection_example():\n    """Basic connection and operation example."""\n    # Create connection\n    connection = create_connection(\n        base_url="http://localhost:2528",\n        auth_mode=AuthMode.NONE\n    )\n\n    # Create client\n    client = create_client(connection)\n\n    # Test basic operations\n    print("Testing basic operations...")\n\n    # Get peers count\n    peers_count = await client.get_peers_count()\n    print(f"Connected peers: {peers_count}")\n\n    # List contexts\n    contexts = await client.list_contexts()\n    print(f"Found {len(contexts)} contexts")\n\n    # List applications\n    apps = await client.list_applications()\n    print(f"Found {len(apps)} applications")\n\n    return client\n\nif __name__ == "__main__":\n    asyncio.run(basic_connection_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# error_handling.py\nimport asyncio\nfrom calimero_client_py import (\n    create_connection, create_client, AuthMode,\n    ClientError, AuthError, NetworkError\n)\n\nasync def error_handling_example():\n    """Example of proper error handling."""\n    try:\n        connection = create_connection("http://localhost:2528", AuthMode.NONE)\n        client = create_client(connection)\n\n        # This might fail if the context doesn\'t exist\n        context = await client.get_context("non-existent-context")\n        print(f"Context: {context}")\n\n    except AuthError as e:\n        print(f"Authentication error: {e}")\n    except NetworkError as e:\n        print(f"Network error: {e}")\n    except ClientError as e:\n        print(f"Client error: {e}")\n    except Exception as e:\n        print(f"Unexpected error: {e}")\n\nif __name__ == "__main__":\n    asyncio.run(error_handling_example())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-3-application-management",children:"Step 3: Application Management"}),"\n",(0,a.jsx)(e.h3,{id:"install-and-manage-applications",children:"Install and Manage Applications"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# application_management.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def application_management_example():\n    """Example of managing applications."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Application Management Example ===")\n\n    # Install an application\n    print("Installing application...")\n    app = await client.install_application(\n        url="https://example.com/my-app.wasm",\n        metadata=b\'{"name": "My Test App", "version": "1.0.0"}\'\n    )\n    app_id = app["application_id"]\n    print(f"\u2713 Installed app: {app_id}")\n\n    # Get application details\n    app_info = await client.get_application(app_id)\n    print(f"\u2713 App details: {app_info}")\n\n    # List all applications\n    apps = await client.list_applications()\n    print(f"\u2713 Total applications: {len(apps)}")\n\n    # Uninstall the application\n    print("Uninstalling application...")\n    result = await client.uninstall_application(app_id)\n    print(f"\u2713 Uninstall result: {result}")\n\n    return app_id\n\nif __name__ == "__main__":\n    asyncio.run(application_management_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"development-application-installation",children:"Development Application Installation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# dev_application.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def dev_application_example():\n    """Example of installing development applications."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Development Application Example ===")\n\n    # Install development application from local path\n    app = await client.install_dev_application(\n        path="/path/to/your/app.wasm",\n        metadata=b\'{"name": "Dev App", "version": "0.1.0"}\'\n    )\n    app_id = app["application_id"]\n    print(f"\u2713 Installed dev app: {app_id}")\n\n    # Clean up\n    await client.uninstall_application(app_id)\n    print("\u2713 Cleaned up dev app")\n\nif __name__ == "__main__":\n    asyncio.run(dev_application_example())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-4-context-management",children:"Step 4: Context Management"}),"\n",(0,a.jsx)(e.h3,{id:"create-and-manage-contexts",children:"Create and Manage Contexts"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# context_management.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def context_management_example():\n    """Example of managing contexts."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Context Management Example ===")\n\n    # First, install an application\n    print("Installing application...")\n    app = await client.install_application(\n        url="https://example.com/my-app.wasm",\n        metadata=b\'{"name": "Context Test App"}\'\n    )\n    app_id = app["application_id"]\n\n    try:\n        # Create a context\n        print("Creating context...")\n        context = await client.create_context(\n            application_id=app_id,\n            protocol="near",\n            params=\'{"network": "testnet"}\'\n        )\n        context_id = context["context_id"]\n        print(f"\u2713 Created context: {context_id}")\n\n        # Get context details\n        context_info = await client.get_context(context_id)\n        print(f"\u2713 Context info: {context_info}")\n\n        # Sync the context\n        print("Syncing context...")\n        sync_result = await client.sync_context(context_id)\n        print(f"\u2713 Sync result: {sync_result}")\n\n        # Get context identities\n        identities = await client.get_context_identities(context_id)\n        print(f"\u2713 Context identities: {identities}")\n\n        # Get context storage\n        storage = await client.get_context_storage(context_id)\n        print(f"\u2713 Context storage: {storage}")\n\n        return context_id\n\n    finally:\n        # Clean up\n        print("Cleaning up...")\n        await client.delete_context(context_id)\n        await client.uninstall_application(app_id)\n        print("\u2713 Cleanup completed")\n\nif __name__ == "__main__":\n    asyncio.run(context_management_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"context-invitations-and-joining",children:"Context Invitations and Joining"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# context_invitations.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def context_invitations_example():\n    """Example of context invitations and joining."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Context Invitations Example ===")\n\n    # Install application\n    app = await client.install_application(\n        url="https://example.com/my-app.wasm",\n        metadata=b\'{"name": "Invitation Test App"}\'\n    )\n    app_id = app["application_id"]\n\n    try:\n        # Create context\n        context = await client.create_context(app_id, "near")\n        context_id = context["context_id"]\n        print(f"\u2713 Created context: {context_id}")\n\n        # Generate identities\n        inviter_identity = await client.generate_context_identity()\n        invitee_identity = await client.generate_context_identity()\n        print(f"\u2713 Generated identities")\n\n        # Invite to context\n        print("Creating invitation...")\n        invitation = await client.invite_to_context(\n            context_id=context_id,\n            inviter_id=inviter_identity["identity_id"],\n            invitee_id=invitee_identity["identity_id"]\n        )\n        print(f"\u2713 Created invitation: {invitation}")\n\n        # Join context\n        print("Joining context...")\n        join_result = await client.join_context(\n            context_id=context_id,\n            invitee_id=invitee_identity["identity_id"],\n            invitation_payload=invitation["invitation_payload"]\n        )\n        print(f"\u2713 Join result: {join_result}")\n\n        return context_id\n\n    finally:\n        # Clean up\n        await client.delete_context(context_id)\n        await client.uninstall_application(app_id)\n        print("\u2713 Cleanup completed")\n\nif __name__ == "__main__":\n    asyncio.run(context_invitations_example())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-5-function-execution",children:"Step 5: Function Execution"}),"\n",(0,a.jsx)(e.h3,{id:"execute-smart-contract-functions",children:"Execute Smart Contract Functions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# function_execution.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def function_execution_example():\n    """Example of executing smart contract functions."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Function Execution Example ===")\n\n    # Install application\n    app = await client.install_application(\n        url="https://example.com/my-app.wasm",\n        metadata=b\'{"name": "Function Test App"}\'\n    )\n    app_id = app["application_id"]\n\n    try:\n        # Create context\n        context = await client.create_context(app_id, "near")\n        context_id = context["context_id"]\n        print(f"\u2713 Created context: {context_id}")\n\n        # Generate executor identity\n        executor_identity = await client.generate_context_identity()\n        executor_public_key = executor_identity["public_key"]\n        print(f"\u2713 Generated executor identity")\n\n        # Execute a simple function\n        print("Executing function...")\n        result = await client.execute_function(\n            context_id=context_id,\n            method="initialize",\n            args=\'{}\',\n            executor_public_key=executor_public_key\n        )\n        print(f"\u2713 Function result: {result}")\n\n        # Execute function with complex arguments\n        print("Executing function with arguments...")\n        transfer_result = await client.execute_function(\n            context_id=context_id,\n            method="transfer",\n            args=\'{"amount": 100, "to": "alice.near", "memo": "Payment"}\',\n            executor_public_key=executor_public_key\n        )\n        print(f"\u2713 Transfer result: {transfer_result}")\n\n        return context_id\n\n    finally:\n        # Clean up\n        await client.delete_context(context_id)\n        await client.uninstall_application(app_id)\n        print("\u2713 Cleanup completed")\n\nif __name__ == "__main__":\n    asyncio.run(function_execution_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"batch-function-execution",children:"Batch Function Execution"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# batch_execution.py\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nasync def batch_execution_example():\n    """Example of batch function execution."""\n    connection = create_connection("http://localhost:2528", AuthMode.NONE)\n    client = create_client(connection)\n\n    print("=== Batch Execution Example ===")\n\n    # Install application\n    app = await client.install_application(\n        url="https://example.com/my-app.wasm",\n        metadata=b\'{"name": "Batch Test App"}\'\n    )\n    app_id = app["application_id"]\n\n    try:\n        # Create context\n        context = await client.create_context(app_id, "near")\n        context_id = context["context_id"]\n        print(f"\u2713 Created context: {context_id}")\n\n        # Generate executor identity\n        executor_identity = await client.generate_context_identity()\n        executor_public_key = executor_identity["public_key"]\n\n        # Define batch operations\n        operations = [\n            {\n                "context_id": context_id,\n                "method": "initialize",\n                "args": "{}",\n                "executor_public_key": executor_public_key\n            },\n            {\n                "context_id": context_id,\n                "method": "set_value",\n                "args": \'{"key": "test", "value": "hello"}\',\n                "executor_public_key": executor_public_key\n            },\n            {\n                "context_id": context_id,\n                "method": "get_value",\n                "args": \'{"key": "test"}\',\n                "executor_public_key": executor_public_key\n            }\n        ]\n\n        # Execute batch operations concurrently\n        print("Executing batch operations...")\n        results = await asyncio.gather(*[\n            client.execute_function(**op) for op in operations\n        ])\n\n        print(f"\u2713 Batch execution completed: {len(results)} operations")\n        for i, result in enumerate(results):\n            print(f"  Operation {i + 1}: {result}")\n\n        return context_id\n\n    finally:\n        # Clean up\n        await client.delete_context(context_id)\n        await client.uninstall_application(app_id)\n        print("\u2713 Cleanup completed")\n\nif __name__ == "__main__":\n    asyncio.run(batch_execution_example())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-6-advanced-patterns",children:"Step 6: Advanced Patterns"}),"\n",(0,a.jsx)(e.h3,{id:"custom-client-wrapper",children:"Custom Client Wrapper"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# custom_client.py\nimport asyncio\nfrom typing import Optional, Dict, Any\nfrom calimero_client_py import create_connection, create_client, AuthMode, ClientError\n\nclass CustomCalimeroClient:\n    """Custom wrapper with additional functionality."""\n\n    def __init__(self, base_url: str, auth_mode: AuthMode = AuthMode.NONE, jwt_token: Optional[str] = None):\n        self.connection = create_connection(base_url, auth_mode, jwt_token)\n        self.client = create_client(self.connection)\n        self._context_cache = {}\n        self._app_cache = {}\n\n    async def get_or_create_context(self, application_id: str, protocol: str, params: str = None) -> Dict[str, Any]:\n        """Get existing context or create new one."""\n        # Check cache first\n        cache_key = f"{application_id}:{protocol}"\n        if cache_key in self._context_cache:\n            return self._context_cache[cache_key]\n\n        # Try to find existing context\n        contexts = await self.client.list_contexts()\n        for context in contexts:\n            if (context.get("application_id") == application_id and\n                context.get("protocol") == protocol):\n                self._context_cache[cache_key] = context\n                return context\n\n        # Create new context\n        context = await self.client.create_context(application_id, protocol, params)\n        self._context_cache[cache_key] = context\n        return context\n\n    async def safe_execute_function(self, context_id: str, method: str, args: str, executor_public_key: str, max_retries: int = 3) -> Dict[str, Any]:\n        """Execute function with safety checks and retries."""\n        # Validate context exists\n        try:\n            context = await self.client.get_context(context_id)\n        except ClientError:\n            raise ValueError(f"Context {context_id} not found")\n\n        # Execute with retries\n        last_error = None\n        for attempt in range(max_retries):\n            try:\n                return await self.client.execute_function(context_id, method, args, executor_public_key)\n            except ClientError as e:\n                last_error = e\n                if attempt < max_retries - 1:\n                    await asyncio.sleep(2 ** attempt)  # Exponential backoff\n                else:\n                    break\n\n        raise last_error\n\n    def clear_cache(self):\n        """Clear internal caches."""\n        self._context_cache.clear()\n        self._app_cache.clear()\n\n# Usage example\nasync def custom_client_example():\n    """Example of using the custom client wrapper."""\n    client = CustomCalimeroClient("http://localhost:2528")\n\n    # Get or create context\n    context = await client.get_or_create_context("app-123", "near")\n    print(f"Context: {context[\'context_id\']}")\n\n    # Safe function execution\n    result = await client.safe_execute_function(\n        context["context_id"], "test", "{}", "key-123"\n    )\n    print(f"Result: {result}")\n\nif __name__ == "__main__":\n    asyncio.run(custom_client_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"monitoring-and-health-checks",children:"Monitoring and Health Checks"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# monitoring.py\nimport asyncio\nimport time\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nclass CalimeroMonitor:\n    """Monitor Calimero node health and performance."""\n\n    def __init__(self, base_url="http://localhost:2528"):\n        self.connection = create_connection(base_url, AuthMode.NONE)\n        self.client = create_client(self.connection)\n        self.metrics = []\n\n    async def collect_metrics(self):\n        """Collect node metrics."""\n        try:\n            # Get basic metrics\n            peers_count = await self.client.get_peers_count()\n            contexts = await self.client.list_contexts()\n            apps = await client.list_applications()\n\n            metrics = {\n                "timestamp": time.time(),\n                "peers_count": peers_count,\n                "contexts_count": len(contexts),\n                "applications_count": len(apps),\n                "status": "healthy"\n            }\n\n            self.metrics.append(metrics)\n            return metrics\n\n        except Exception as e:\n            error_metrics = {\n                "timestamp": time.time(),\n                "status": "error",\n                "error": str(e)\n            }\n            self.metrics.append(error_metrics)\n            return error_metrics\n\n    async def start_monitoring(self, interval=60):\n        """Start monitoring with specified interval."""\n        print(f"Starting monitoring (interval: {interval}s)")\n\n        while True:\n            metrics = await self.collect_metrics()\n            print(f"Metrics: {metrics}")\n\n            # Check for alerts\n            if metrics["status"] == "error":\n                print("ALERT: Node is unhealthy!")\n\n            await asyncio.sleep(interval)\n\n    def get_metrics_summary(self):\n        """Get summary of collected metrics."""\n        if not self.metrics:\n            return "No metrics collected"\n\n        healthy_metrics = [m for m in self.metrics if m["status"] == "healthy"]\n        error_metrics = [m for m in self.metrics if m["status"] == "error"]\n\n        return {\n            "total_samples": len(self.metrics),\n            "healthy_samples": len(healthy_metrics),\n            "error_samples": len(error_metrics),\n            "uptime_percentage": len(healthy_metrics) / len(self.metrics) * 100\n        }\n\n# Usage example\nasync def monitoring_example():\n    """Example of using the monitoring system."""\n    monitor = CalimeroMonitor()\n\n    # Run monitoring for 5 minutes\n    try:\n        await asyncio.wait_for(monitor.start_monitoring(10), timeout=300)\n    except asyncio.TimeoutError:\n        print("Monitoring completed")\n        print(f"Summary: {monitor.get_metrics_summary()}")\n\nif __name__ == "__main__":\n    asyncio.run(monitoring_example())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-7-integration-with-web-frameworks",children:"Step 7: Integration with Web Frameworks"}),"\n",(0,a.jsx)(e.h3,{id:"fastapi-integration",children:"FastAPI Integration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# fastapi_integration.py\nfrom fastapi import FastAPI, HTTPException\nfrom calimero_client_py import create_connection, create_client, AuthMode, ClientError\n\napp = FastAPI(title="Calimero API Wrapper")\n\n# Global client instance\nconnection = create_connection("http://localhost:2528", AuthMode.NONE)\nclient = create_client(connection)\n\n@app.get("/contexts")\nasync def get_contexts():\n    """Get all contexts."""\n    try:\n        contexts = await client.list_contexts()\n        return {"contexts": contexts}\n    except ClientError as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get("/contexts/{context_id}")\nasync def get_context(context_id: str):\n    """Get specific context."""\n    try:\n        context = await client.get_context(context_id)\n        return context\n    except ClientError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n\n@app.post("/contexts")\nasync def create_context(application_id: str, protocol: str, params: str = None):\n    """Create a new context."""\n    try:\n        context = await client.create_context(application_id, protocol, params)\n        return context\n    except ClientError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.post("/contexts/{context_id}/execute")\nasync def execute_function(\n    context_id: str,\n    method: str,\n    args: str,\n    executor_public_key: str\n):\n    """Execute a function in a context."""\n    try:\n        result = await client.execute_function(\n            context_id, method, args, executor_public_key\n        )\n        return result\n    except ClientError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"django-integration",children:"Django Integration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# django_integration.py\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode, ClientError\n\n# Global client instance\nconnection = create_connection("http://localhost:2528", AuthMode.NONE)\nclient = create_client(connection)\n\n@csrf_exempt\n@require_http_methods(["GET"])\ndef list_contexts(request):\n    """List all contexts."""\n    try:\n        contexts = asyncio.run(client.list_contexts())\n        return JsonResponse({"contexts": contexts})\n    except ClientError as e:\n        return JsonResponse({"error": str(e)}, status=500)\n\n@csrf_exempt\n@require_http_methods(["POST"])\ndef create_context(request):\n    """Create a new context."""\n    try:\n        data = request.json\n        context = asyncio.run(client.create_context(\n            data["application_id"],\n            data["protocol"],\n            data.get("params")\n        ))\n        return JsonResponse(context)\n    except ClientError as e:\n        return JsonResponse({"error": str(e)}, status=400)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-8-testing",children:"Step 8: Testing"}),"\n",(0,a.jsx)(e.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# test_calimero_client.py\nimport pytest\nfrom unittest.mock import AsyncMock, MagicMock\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nclass TestCalimeroClient:\n    """Test suite for Calimero client."""\n\n    @pytest.fixture\n    def mock_client(self):\n        """Create a mock client for testing."""\n        connection = create_connection("http://localhost:2528", AuthMode.NONE)\n        client = create_client(connection)\n\n        # Mock the client methods\n        client.list_contexts = AsyncMock(return_value=[\n            {"context_id": "ctx-1", "application_id": "app-1"},\n            {"context_id": "ctx-2", "application_id": "app-2"}\n        ])\n\n        client.create_context = AsyncMock(return_value={\n            "context_id": "ctx-3", "application_id": "app-3"\n        })\n\n        return client\n\n    @pytest.mark.asyncio\n    async def test_list_contexts(self, mock_client):\n        """Test listing contexts."""\n        contexts = await mock_client.list_contexts()\n        assert len(contexts) == 2\n        assert contexts[0]["context_id"] == "ctx-1"\n\n    @pytest.mark.asyncio\n    async def test_create_context(self, mock_client):\n        """Test creating context."""\n        context = await mock_client.create_context("app-3", "near")\n        assert context["context_id"] == "ctx-3"\n        assert context["application_id"] == "app-3"\n\n# Run tests\nif __name__ == "__main__":\n    pytest.main([__file__])\n'})}),"\n",(0,a.jsx)(e.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# test_integration.py\nimport pytest\nimport asyncio\nfrom calimero_client_py import create_connection, create_client, AuthMode\n\nclass TestCalimeroIntegration:\n    """Integration tests for Calimero client."""\n\n    @pytest.fixture\n    async def client(self):\n        """Create a real client for integration testing."""\n        connection = create_connection("http://localhost:2528", AuthMode.NONE)\n        client = create_client(connection)\n        return client\n\n    @pytest.mark.asyncio\n    async def test_full_workflow(self, client):\n        """Test complete workflow."""\n        # Install application\n        app = await client.install_application(\n            url="https://example.com/test.wasm",\n            metadata=b\'{"name": "Test App"}\'\n        )\n        app_id = app["application_id"]\n\n        try:\n            # Create context\n            context = await client.create_context(app_id, "near")\n            context_id = context["context_id"]\n\n            # Execute function\n            result = await client.execute_function(\n                context_id, "test", "{}", "test-key"\n            )\n\n            assert result is not None\n\n        finally:\n            # Cleanup\n            await client.delete_context(context_id)\n            await client.uninstall_application(app_id)\n\n# Run integration tests\nif __name__ == "__main__":\n    pytest.main([__file__, "-m", "integration"])\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-9-production-deployment",children:"Step 9: Production Deployment"}),"\n",(0,a.jsx)(e.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# config.py\nimport os\nfrom calimero_client_py import AuthMode\n\nclass CalimeroConfig:\n    """Configuration for Calimero client."""\n\n    def __init__(self):\n        self.base_url = os.getenv("CALIMERO_BASE_URL", "http://localhost:2528")\n        self.auth_mode = AuthMode.REQUIRED if os.getenv("CALIMERO_AUTH_REQUIRED") else AuthMode.NONE\n        self.jwt_token = os.getenv("CALIMERO_JWT_TOKEN")\n        self.max_retries = int(os.getenv("CALIMERO_MAX_RETRIES", "3"))\n        self.timeout = int(os.getenv("CALIMERO_TIMEOUT", "30"))\n\n    def get_connection_params(self):\n        """Get connection parameters."""\n        params = {\n            "base_url": self.base_url,\n            "auth_mode": self.auth_mode\n        }\n        if self.jwt_token:\n            params["jwt_token"] = self.jwt_token\n        return params\n'})}),"\n",(0,a.jsx)(e.h3,{id:"production-client",children:"Production Client"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# production_client.py\nimport asyncio\nimport logging\nfrom calimero_client_py import create_connection, create_client, AuthMode, ClientError\nfrom config import CalimeroConfig\n\nclass ProductionCalimeroClient:\n    """Production-ready Calimero client."""\n\n    def __init__(self, config: CalimeroConfig):\n        self.config = config\n        self.connection = create_connection(**config.get_connection_params())\n        self.client = create_client(self.connection)\n        self.logger = logging.getLogger(__name__)\n\n    async def execute_with_retry(self, operation, *args, **kwargs):\n        """Execute operation with retry logic."""\n        last_error = None\n\n        for attempt in range(self.config.max_retries):\n            try:\n                return await operation(*args, **kwargs)\n            except ClientError as e:\n                last_error = e\n                self.logger.warning(f"Attempt {attempt + 1} failed: {e}")\n\n                if attempt < self.config.max_retries - 1:\n                    await asyncio.sleep(2 ** attempt)  # Exponential backoff\n                else:\n                    break\n\n        self.logger.error(f"All {self.config.max_retries} attempts failed")\n        raise last_error\n\n    async def safe_list_contexts(self):\n        """Safely list contexts with retry."""\n        return await self.execute_with_retry(self.client.list_contexts)\n\n    async def safe_create_context(self, application_id: str, protocol: str, params: str = None):\n        """Safely create context with retry."""\n        return await self.execute_with_retry(\n            self.client.create_context, application_id, protocol, params\n        )\n\n# Usage\nasync def main():\n    config = CalimeroConfig()\n    client = ProductionCalimeroClient(config)\n\n    contexts = await client.safe_list_contexts()\n    print(f"Found {len(contexts)} contexts")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-10-best-practices-and-tips",children:"Step 10: Best Practices and Tips"}),"\n",(0,a.jsx)(e.h3,{id:"1-connection-management",children:"1. Connection Management"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Reuse client instances when possible"}),"\n",(0,a.jsx)(e.li,{children:"Use connection pooling for high-throughput applications"}),"\n",(0,a.jsx)(e.li,{children:"Implement proper cleanup in finally blocks"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Use specific exception types (AuthError, NetworkError, etc.)"}),"\n",(0,a.jsx)(e.li,{children:"Implement retry logic with exponential backoff"}),"\n",(0,a.jsx)(e.li,{children:"Log errors for debugging and monitoring"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Use asyncio.gather() for concurrent operations"}),"\n",(0,a.jsx)(e.li,{children:"Implement caching for frequently accessed data"}),"\n",(0,a.jsx)(e.li,{children:"Monitor memory usage for large datasets"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"4-testing",children:"4. Testing"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Write unit tests with mocked clients"}),"\n",(0,a.jsx)(e.li,{children:"Implement integration tests with real servers"}),"\n",(0,a.jsx)(e.li,{children:"Use fixtures for test setup and cleanup"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"5-monitoring",children:"5. Monitoring"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Implement logging and metrics collection"}),"\n",(0,a.jsx)(e.li,{children:"Use circuit breakers for fault tolerance"}),"\n",(0,a.jsx)(e.li,{children:"Monitor performance and error rates"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(e.p,{children:"Now that you've completed this tutorial, you can:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsxs)(e.strong,{children:["Explore the\n",(0,a.jsx)(e.a,{href:"/developer-tools/SDK/client-sdk/calimero-client-py",children:"Python Client Documentation"})]}),"\nfor complete method documentation, examples, and advanced usage"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Check out the Examples section"})," for more practical patterns"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Read the Advanced Usage section"})," for optimization techniques"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Review the Migration Guide section"})," if coming from other clients"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"GitHub Repository"}),":\n",(0,a.jsx)(e.a,{href:"https://github.com/calimero-network/calimero-client-py",children:"calimero-client-py"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"PyPI Package"}),":\n",(0,a.jsx)(e.a,{href:"https://pypi.org/project/calimero-client-py/",children:"calimero-client-py"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Community Discord"}),": ",(0,a.jsx)(e.a,{href:"https://discord.gg/calimero",children:"Join the conversation"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Email Support"}),": ",(0,a.jsx)(e.a,{href:"mailto:team@calimero.network",children:"team@calimero.network"})]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Happy coding with the Calimero Python client! \ud83d\udc0d\u2728"})]})}function _(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},48854:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>r});var i=t(30758);const a={},o=i.createContext(a);function c(n){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:c(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);