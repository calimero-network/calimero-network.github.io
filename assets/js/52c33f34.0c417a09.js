"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8282],{18226:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"developer-tools/CLI/merod","title":"Merod","description":"Merod is a command-line tool that allows you to initialize, configure, and run","source":"@site/docs/05-developer-tools/01-CLI/01-merod.mdx","sourceDirName":"05-developer-tools/01-CLI","slug":"/developer-tools/CLI/merod","permalink":"/developer-tools/CLI/merod","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/01-CLI/01-merod.mdx","tags":[],"version":"current","lastUpdatedAt":1757506344000,"sidebarPosition":1,"frontMatter":{"id":"merod","title":"Merod"},"sidebar":"tutorialSidebar","previous":{"title":"Developer Tools","permalink":"/developer-tools/overview"},"next":{"title":"Meroctl","permalink":"/developer-tools/CLI/meroctl"}}');var s=r(86070),i=r(48854),l=r(23061);const d={id:"merod",title:"Merod"},t=void 0,a={},c=[...l.RM,{value:"Usage",id:"usage",level:2},{value:"Examples with Real Values",id:"examples-with-real-values",level:2},{value:"Parameter Reference",id:"parameter-reference",level:2},{value:"Commands",id:"commands",level:2},{value:"Initialize Node Configuration",id:"initialize-node-configuration",level:3},{value:"Configure Node",id:"configure-node",level:3},{value:"Run Node",id:"run-node",level:3},{value:"Relay Mode",id:"relay-mode",level:3},{value:"Global Options",id:"global-options",level:2},{value:"Complete Workflow Examples",id:"complete-workflow-examples",level:2},{value:"Basic Node Setup",id:"basic-node-setup",level:3},{value:"Production Node Setup",id:"production-node-setup",level:3},{value:"Multi-Protocol Node",id:"multi-protocol-node",level:3}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Merod is a command-line tool that allows you to initialize, configure, and run\nCalimero nodes."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Installation"}),(0,s.jsx)("p",{children:(0,s.jsx)(l.Ay,{})})]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod [OPTIONS] --node-name <NODE_NAME> <COMMAND>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples-with-real-values",children:"Examples with Real Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:'# Basic usage with a node named "node1"\nmerod --node-name node1 init\n\n# Using a different node name\nmerod --node-name my-production-node run\n\n# With custom home directory\nmerod --home ~/.calimero-custom --node-name node1 init\n\n# With additional options\nmerod --node-name node1 init --server-port 3000 --swarm-port 4000\n'})}),"\n",(0,s.jsx)(n.h2,{id:"parameter-reference",children:"Parameter Reference"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Parameter"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Real Examples"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<NODE_NAME>"})}),(0,s.jsx)(n.td,{children:"Name of the node to manage"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"node1"}),", ",(0,s.jsx)(n.code,{children:"prod-node"}),", ",(0,s.jsx)(n.code,{children:"test-node"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<COMMAND>"})}),(0,s.jsx)(n.td,{children:"Subcommand to execute"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"init"}),", ",(0,s.jsx)(n.code,{children:"config"}),", ",(0,s.jsx)(n.code,{children:"run"}),", ",(0,s.jsx)(n.code,{children:"relay"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<PATH>"})}),(0,s.jsx)(n.td,{children:"File system path"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"/path/to/node"}),", ",(0,s.jsx)(n.code,{children:"./my-node"}),", ",(0,s.jsx)(n.code,{children:"~/.calimero"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<HOST>"})}),(0,s.jsx)(n.td,{children:"Network host address"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"127.0.0.1"}),", ",(0,s.jsx)(n.code,{children:"0.0.0.0"}),", ",(0,s.jsx)(n.code,{children:"143.34.182.202"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<PORT>"})}),(0,s.jsx)(n.td,{children:"Network port number"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"2428"}),", ",(0,s.jsx)(n.code,{children:"2528"}),", ",(0,s.jsx)(n.code,{children:"3000"}),", ",(0,s.jsx)(n.code,{children:"63529"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<URL>"})}),(0,s.jsx)(n.td,{children:"Remote service URL"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"http://relayer.com"}),", ",(0,s.jsx)(n.code,{children:"https://api.example.com"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<NETWORK>"})}),(0,s.jsx)(n.td,{children:"Network identifier"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"calimero-dev"}),", ",(0,s.jsx)(n.code,{children:"ipfs"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<PROTOCOL>"})}),(0,s.jsx)(n.td,{children:"Blockchain protocol"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"near"}),", ",(0,s.jsx)(n.code,{children:"starknet"}),", ",(0,s.jsx)(n.code,{children:"icp"}),", ",(0,s.jsx)(n.code,{children:"stellar"}),", ",(0,s.jsx)(n.code,{children:"ethereum"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<ADDR>"})}),(0,s.jsx)(n.td,{children:"Network address"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"127.0.0.1:2428"}),", ",(0,s.jsx)(n.code,{children:"192.168.1.100:2528"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<URI>"})}),(0,s.jsx)(n.td,{children:"Uniform Resource Identifier"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"0.0.0.0:63529"}),", ",(0,s.jsx)(n.code,{children:"127.0.0.1:63529"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,s.jsx)(n.h3,{id:"initialize-node-configuration",children:"Initialize Node Configuration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod --node-name <NODE_NAME> init [OPTIONS]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commands:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"init"})," - Initialize node configuration with default or custom settings"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Options:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--boot-nodes <ADDR>"})," - List of bootstrap nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--boot-network <NETWORK>"})," - Use nodes from a known network [default:\ncalimero-dev] [possible values: calimero-dev, ipfs]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--swarm-host <HOST>"})," - Host to listen on [default: 0.0.0.0,::]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--swarm-port <PORT>"})," - Port to listen on [default: 2428]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--server-host <HOST>"})," - Host to listen on for RPC [default: 127.0.0.1,::1]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--server-port <PORT>"})," - Port to listen on for RPC [default: 2528]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--relayer-url <URL>"})," - URL of the relayer for submitting NEAR transactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--protocol <PROTOCOL>"})," - Name of protocol [default: near] [possible values:\nnear, starknet, icp, stellar, ethereum]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--mdns"})," - Enable mDNS discovery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--advertise-address"})," - Advertise observed address"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--rendezvous-registrations-limit <RENDEZVOUS_REGISTRATIONS_LIMIT>"})," - Maximum\nnumber of rendezvous registrations allowed [default: 3]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--relay-registrations-limit <RELAY_REGISTRATIONS_LIMIT>"})," - Maximum number of\nrelay registrations allowed [default: 3]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--autonat-confidence-threshold <AUTONAT_CONFIDENCE_THRESHOLD>"})," - Minimum\nnumber of successful autonat probes required to be confident about NAT status\n[default: 2]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--force"})," - Force initialization even if the directory already exists"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Initialize a node with default settings\nmerod --node-name node1 init\n\n# Initialize with custom ports\nmerod --node-name node1 init --server-port 3000 --swarm-port 4000\n\n# Initialize with custom home directory\nmkdir data\nmerod --home data/ --node-name node1 init\n\n# Initialize with specific protocol and network\nmerod --node-name node1 init --protocol ethereum --boot-network ipfs\n\n# Initialize with custom swarm host\nmerod --node-name node1 init --swarm-host 192.168.1.100 --swarm-port 2428\n\n# Force initialization\nmerod --node-name node1 init --force\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configure-node",children:"Configure Node"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod --node-name <NODE_NAME> config [ARGS]...\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commands:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"})," - Configure an existing node with key-value pairs"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[ARGS]..."})," - Key-value pairs to be added or updated in the TOML file"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Configure server host and port\nmerod --node-name node1 config --server-host 143.34.182.202 --server-port 3000\n\n# Configure swarm settings\nmerod --node-name node1 config --swarm-host 0.0.0.0 --swarm-port 2428\n\n# Configure protocol and relayer\nmerod --node-name node1 config --protocol near --relayer-url https://relayer.near.org\n\n# Configure multiple settings at once\nmerod --node-name node1 config --server-host 192.168.1.100 --server-port 8080 --swarm-port 9090\n"})}),"\n",(0,s.jsx)(n.h3,{id:"run-node",children:"Run Node"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod --node-name <NODE_NAME> run\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commands:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"run"})," - Start and run the configured node"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run a node with default configuration\nmerod --node-name node1 run\n\n# Run a node with custom home directory\nmerod --home ~/.calimero-custom --node-name node1 run\n\n# Run a production node\nmerod --node-name prod-node run\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relay-mode",children:"Relay Mode"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod --node-name <NODE_NAME> relay [OPTIONS]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Commands:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"relay"})," - Spin up a relay for external client interactions"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Options:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-l, --listen <URI>"})," - Sets the address to listen on [default: 0.0.0.0:63529] [env:\nPORT]"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Start relay with default port\nmerod --node-name node1 relay\n\n# Start relay on specific address and port\nmerod --node-name node1 relay --listen 127.0.0.1:8080\n\n# Start relay on custom port\nmerod --node-name node1 relay --listen 0.0.0.0:9000\n\n# Start relay using environment variable\nPORT=7000 merod --node-name node1 relay\n"})}),"\n",(0,s.jsx)(n.h2,{id:"global-options",children:"Global Options"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Terminal"',children:"merod [OPTIONS] --node-name <NODE_NAME> <COMMAND>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Options:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--home <PATH>"})," - Directory for config and data [env: CALIMERO_HOME] [default:\n/Users/anton/.calimero]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-n, --node-name <NAME>"})," - Name of node"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-h, --help"})," - Print help"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-V, --version"})," - Print version"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Environment Variables:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CALIMERO_HOME"})," - Directory for config and data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NEAR_API_KEY"})," - NEAR API key for blockchain operations"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use custom home directory\nmerod --home ~/.calimero-custom --node-name node1 init\n\n# Set home via environment variable\nexport CALIMERO_HOME=~/.calimero-custom\nmerod --node-name node1 init\n\n# Check version\nmerod --version\n\n# Get help for specific command\nmerod --node-name node1 init --help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-workflow-examples",children:"Complete Workflow Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-node-setup",children:"Basic Node Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 1. Initialize a new node\nmerod --node-name node1 init\n\n# 2. Configure the node (optional)\nmerod --node-name node1 config --server-port 3000 --swarm-port 4000\n\n# 3. Run the node\nmerod --node-name node1 run\n"})}),"\n",(0,s.jsx)(n.h3,{id:"production-node-setup",children:"Production Node Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 1. Create custom directory\nmkdir -p /opt/.calimero/prod-node\n\n# 2. Initialize with production settings\nmerod --home /opt/.calimero/prod-node --node-name prod-node init \\\n  --server-host 0.0.0.0 \\\n  --server-port 8080 \\\n  --swarm-host 0.0.0.0 \\\n  --swarm-port 9090 \\\n  --protocol near \\\n  --relayer-url https://relayer.near.org\n\n# 3. Run the production node\nmerod --home /opt/.calimero/prod-node --node-name prod-node run\n"})}),"\n",(0,s.jsx)(n.h3,{id:"multi-protocol-node",children:"Multi-Protocol Node"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 1. Initialize node supporting multiple protocols\nmerod --node-name multi-node init \\\n  --protocol near \\\n  --boot-network calimero-dev \\\n  --mdns \\\n  --advertise-address\n\n# 2. Configure additional protocols\nmerod --node-name multi-node config \\\n  --protocol ethereum \\\n  --relayer-url https://ethereum-relayer.com\n\n# 3. Run the multi-protocol node\nmerod --node-name multi-node run\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Run ",(0,s.jsx)(n.code,{children:"merod --help"})," or ",(0,s.jsx)(n.code,{children:"merod --node-name <NODE_NAME> <COMMAND> --help"})," to get\ndetailed information about available options and commands."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The default location of the config and data directory is ",(0,s.jsx)(n.code,{children:"~/.calimero"}),". You can\nchange this location by using the ",(0,s.jsx)(n.code,{children:"--home"})," option or setting the ",(0,s.jsx)(n.code,{children:"CALIMERO_HOME"}),"\nenvironment variable."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},23061:(e,n,r)=>{r.d(n,{Ay:()=>a,RM:()=>d});var o=r(86070),s=r(48854),i=r(93916),l=r(90099);const d=[{value:"Steps",id:"steps",level:4},{value:"Steps",id:"steps-1",level:4},{value:"Notes for Shell Environments",id:"notes-for-shell-environments",level:4}];function t(e){const n={code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["You can choose to install ",(0,o.jsx)(n.code,{children:"merod"})," using either the installation script or\nHomebrew."]}),"\n","\n",(0,o.jsxs)(i.A,{defaultValue:"homebrew",values:[{label:"Homebrew",value:"homebrew"},{label:"Installation Script",value:"script"}],children:[(0,o.jsxs)(l.A,{value:"homebrew",children:[(0,o.jsxs)(n.p,{children:["If you use Homebrew, you can install ",(0,o.jsx)(n.code,{children:"merod"})," directly with the following\nsteps:"]}),(0,o.jsx)(n.h4,{id:"steps",children:"Steps"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the Calimero Homebrew tap:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"brew tap calimero-network/homebrew-tap\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Install ",(0,o.jsx)(n.code,{children:"merod"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"brew install merod\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Verify the installation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"merod --version\n"})}),"\n"]}),"\n"]}),(0,o.jsx)(n.p,{children:"If the version number appears, the installation was successful."})]}),(0,o.jsxs)(l.A,{value:"script",children:[(0,o.jsx)(n.p,{children:"The installation script supports multiple terminal environments and will\nautomatically configure your PATH based on your shell."}),(0,o.jsx)(n.h4,{id:"steps-1",children:"Steps"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Open your terminal and run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"curl -sSf https://raw.githubusercontent.com/calimero-network/install-sh/master/install-merod.sh | bash\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Source the updated PATH:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"source <your-shell-config-file>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Replace ",(0,o.jsx)(n.code,{children:"<your-shell-config-file>"})," with ",(0,o.jsx)(n.code,{children:".bashrc"}),", ",(0,o.jsx)(n.code,{children:".zshrc"}),", or the relevant\nconfiguration file for your shell."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Verify the installation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"merod --version\n"})}),"\n"]}),"\n"]}),(0,o.jsx)(n.p,{children:"If the version number appears, the installation was successful."}),(0,o.jsx)(n.h4,{id:"notes-for-shell-environments",children:"Notes for Shell Environments"}),(0,o.jsx)(n.p,{children:"The script automatically updates your PATH based on your shell configuration:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Bash"}),": Updates ",(0,o.jsx)(n.code,{children:".bashrc"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Zsh"}),": Updates ",(0,o.jsx)(n.code,{children:".zshrc"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fish"}),": Modifies ",(0,o.jsx)(n.code,{children:"~/.config/fish/config.fish"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Csh/Tcsh"}),": Updates ",(0,o.jsx)(n.code,{children:".cshrc"}),"."]}),"\n"]}),(0,o.jsxs)(n.p,{children:["To apply the changes immediately, use the ",(0,o.jsx)(n.code,{children:"source"})," command as described in step\n2 above."]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},48854:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var o=r(30758);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}},90099:(e,n,r)=>{r.d(n,{A:()=>l});r(30758);var o=r(13526);const s={tabItem:"tabItem_z2hR"};var i=r(86070);function l({children:e,hidden:n,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,r),hidden:n,children:e})}},93916:(e,n,r)=>{r.d(n,{A:()=>w});var o=r(30758),s=r(13526),i=r(66262),l=r(25557),d=r(42388),t=r(69387),a=r(39304),c=r(65261);function h(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,o.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:r,default:o}})=>({value:e,label:n,attributes:r,default:o}))}(r);return function(e){const n=(0,a.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function x({queryString:e=!1,groupId:n}){const r=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,t.aZ)(s),(0,o.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function j(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,i=u(e),[l,t]=(0,o.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i})),[a,h]=x({queryString:r,groupId:s}),[j,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,c.Dv)(n);return[r,(0,o.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{const e=a??j;return m({value:e,tabValues:i})?e:null})();(0,d.A)(()=>{f&&t(f)},[f]);return{selectedValue:l,selectValue:(0,o.useCallback)(e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);t(e),h(e),p(e)},[h,p,i]),tabValues:i}}var p=r(11200);const f={tabList:"tabList_BIpj",tabItem:"tabItem_xLR7"};var g=r(86070);function v({className:e,block:n,selectedValue:r,selectValue:o,tabValues:l}){const d=[],{blockElementScrollPositionUntilNextRender:t}=(0,i.a_)(),a=e=>{const n=e.currentTarget,s=d.indexOf(n),i=l[s].value;i!==r&&(t(n),o(i))},c=e=>{let n=null;switch(e.key){case"Enter":a(e);break;case"ArrowRight":{const r=d.indexOf(e.currentTarget)+1;n=d[r]??d[0];break}case"ArrowLeft":{const r=d.indexOf(e.currentTarget)-1;n=d[r]??d[d.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:o})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{d.push(e)},onKeyDown:c,onClick:a,...o,className:(0,s.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function b({lazy:e,children:n,selectedValue:r}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===r);return e?(0,o.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function y(e){const n=j(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(v,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function w(e){const n=(0,p.A)();return(0,g.jsx)(y,{...e,children:h(e.children)},String(n))}}}]);