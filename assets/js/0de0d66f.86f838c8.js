"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2618],{37611:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"developer-tools/merobox/testing-integration-examples","title":"Testing Integration Examples","description":"Examples of integrating Merobox with testing frameworks and CI/CD pipelines.","source":"@site/docs/05-developer-tools/merobox/testing-integration-examples.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/testing-integration-examples","permalink":"/developer-tools/merobox/testing-integration-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/testing-integration-examples.mdx","tags":[],"version":"current","lastUpdatedAt":1757979038000,"sidebarPosition":4.3,"frontMatter":{"title":"Testing Integration Examples","description":"Examples of integrating Merobox with testing frameworks and CI/CD pipelines.","sidebar_position":4.3},"sidebar":"tutorialSidebar","previous":{"title":"Real-World Examples","permalink":"/developer-tools/merobox/real-world-examples"},"next":{"title":"Advanced Examples","permalink":"/developer-tools/merobox/advanced-examples"}}');var r=t(86070),i=t(48854);const a={title:"Testing Integration Examples",description:"Examples of integrating Merobox with testing frameworks and CI/CD pipelines.",sidebar_position:4.3},o="Testing Integration Examples",l={},p=[{value:"Example 1: Python Testing with Merobox",id:"example-1-python-testing-with-merobox",level:2},{value:"Basic Test Setup",id:"basic-test-setup",level:3},{value:"Advanced Test Configuration",id:"advanced-test-configuration",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Example 2: Workflow-based Test Setup",id:"example-2-workflow-based-test-setup",level:2},{value:"Test Setup Workflow",id:"test-setup-workflow",level:3},{value:"Using Test Setup in Tests",id:"using-test-setup-in-tests",level:3},{value:"Example 3: CI/CD Integration",id:"example-3-cicd-integration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Jenkins Pipeline",id:"jenkins-pipeline",level:3},{value:"Example 4: Parallel Test Execution",id:"example-4-parallel-test-execution",level:2},{value:"Parallel Test Configuration",id:"parallel-test-configuration",level:3},{value:"Running Parallel Tests",id:"running-parallel-tests",level:3},{value:"Example 5: Test Data Management",id:"example-5-test-data-management",level:2},{value:"Test Data Fixtures",id:"test-data-fixtures",level:3},{value:"Dynamic Test Data Generation",id:"dynamic-test-data-generation",level:3},{value:"Example 6: Test Reporting and Coverage",id:"example-6-test-reporting-and-coverage",level:2},{value:"Coverage Configuration",id:"coverage-configuration",level:3},{value:"Test Reporting",id:"test-reporting",level:3},{value:"Best Practices for Testing Integration",id:"best-practices-for-testing-integration",level:2},{value:"1. Test Isolation",id:"1-test-isolation",level:3},{value:"2. Resource Cleanup",id:"2-resource-cleanup",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Performance Monitoring",id:"4-performance-monitoring",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing-integration-examples",children:"Testing Integration Examples"})}),"\n",(0,r.jsx)(n.p,{children:"These examples show how to integrate Merobox with popular testing frameworks and\nCI/CD pipelines for automated testing."}),"\n",(0,r.jsx)(n.h2,{id:"example-1-python-testing-with-merobox",children:"Example 1: Python Testing with Merobox"}),"\n",(0,r.jsx)(n.p,{children:"Use Merobox in your Python test suite."}),"\n",(0,r.jsx)(n.h3,{id:"basic-test-setup",children:"Basic Test Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_my_app.py\nimport pytest\nfrom merobox.testing import cluster, workflow\nfrom my_app.client import MyAppClient\n\n@pytest.fixture(scope="function")\ndef test_cluster():\n    """Create a test cluster for each test."""\n    with cluster(count=2, prefix="test") as env:\n        yield env\n\ndef test_basic_functionality(test_cluster):\n    """Test basic application functionality."""\n    # Get node endpoints\n    node1_endpoint = test_cluster["endpoints"]["test-1"]\n    node2_endpoint = test_cluster["endpoints"]["test-2"]\n\n    # Create clients\n    client1 = MyAppClient(node1_endpoint)\n    client2 = MyAppClient(node2_endpoint)\n\n    # Test functionality\n    result = client1.health_check()\n    assert result is not None\n\n    # Test cross-node communication\n    client1.set_data("key", "value")\n    value = client2.get_data("key")\n    assert value == "value"\n\n@pytest.fixture(scope="session")\ndef app_workflow():\n    """Run a complex workflow for session-scoped tests."""\n    with workflow("workflows/app-setup.yml", prefix="session") as env:\n        yield env\n\ndef test_complex_scenario(app_workflow):\n    """Test complex application scenario."""\n    # Use pre-configured workflow environment\n    nodes = app_workflow["nodes"]\n    context_id = app_workflow["dynamic_values"]["context_id"]\n\n    # Test with pre-configured environment\n    assert context_id is not None\n    assert len(nodes) > 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-test-configuration",children:"Advanced Test Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# conftest.py\nimport pytest\nfrom merobox.testing import cluster, workflow\n\n@pytest.fixture(scope="session")\ndef production_cluster():\n    """Production-like cluster for integration tests."""\n    with cluster(\n        count=3,\n        prefix="prod",\n        image="ghcr.io/calimero-network/merod:latest",\n        chain_id="mainnet-1",\n        wait_for_ready=True\n    ) as test_env:\n        yield test_env\n\n@pytest.fixture(scope="function")\ndef test_workflow():\n    """Run a complex workflow for each test."""\n    with workflow(\n        "workflows/test-setup.yml",\n        prefix="test",\n        scope="function"\n    ) as env:\n        yield env\n\n@pytest.fixture\ndef test_data():\n    """Provide test data for tests."""\n    return {\n        "test_app": "test-application.wasm",\n        "test_config": {"setting": "value"},\n        "test_params": ["param1", "param2"]\n    }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_performance.py\nimport pytest\nimport time\nfrom merobox.testing import cluster\n\n@pytest.fixture\ndef performance_cluster():\n    """High-performance cluster for performance tests."""\n    with cluster(\n        count=5,\n        prefix="perf",\n        image="ghcr.io/calimero-network/merod:edge",\n        resources={"memory": "2G", "cpus": "1.0"}\n    ) as env:\n        yield env\n\ndef test_performance_under_load(performance_cluster):\n    """Test application performance under load."""\n    endpoints = performance_cluster["endpoints"]\n\n    # Create multiple clients\n    clients = []\n    for i in range(5):\n        endpoint = endpoints[f"perf-{i+1}"]\n        clients.append(MyAppClient(endpoint))\n\n    # Run performance test\n    start_time = time.time()\n\n    # Simulate load\n    for i in range(100):\n        client = clients[i % len(clients)]\n        result = client.process_data(f"load_test_{i}")\n        assert result is not None\n\n    end_time = time.time()\n    duration = end_time - start_time\n\n    # Assert performance requirements\n    assert duration < 10.0  # Should complete within 10 seconds\n    print(f"Performance test completed in {duration:.2f} seconds")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-2-workflow-based-test-setup",children:"Example 2: Workflow-based Test Setup"}),"\n",(0,r.jsx)(n.p,{children:"Use workflows to set up complex test environments."}),"\n",(0,r.jsx)(n.h3,{id:"test-setup-workflow",children:"Test Setup Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# workflows/test-setup.yml\ndescription: Test environment setup\nname: Test Setup\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: test-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: test-node-1\n    path: ./test-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: test-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Setup Test Data\n    type: call\n    node: test-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: setup_test_data\n    args:\n      test_cases: 100\n\n  - name: Create Test Identities\n    type: create_identity\n    node: test-node-2\n    outputs:\n      test_user1: publicKey\n\n  - name: Create Another Identity\n    type: create_identity\n    node: test-node-3\n    outputs:\n      test_user2: publicKey\n\nstop_all_nodes: false # Keep nodes running for tests\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-test-setup-in-tests",children:"Using Test Setup in Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_with_workflow.py\nimport pytest\nfrom merobox.testing import workflow\n\n@pytest.fixture(scope="session")\ndef test_environment():\n    """Set up test environment using workflow."""\n    with workflow("workflows/test-setup.yml", prefix="test") as env:\n        yield env\n\ndef test_application_functionality(test_environment):\n    """Test application with pre-configured environment."""\n    # Get configuration from workflow\n    context_id = test_environment["dynamic_values"]["context_id"]\n    member_key = test_environment["dynamic_values"]["member_key"]\n    test_user1 = test_environment["dynamic_values"]["test_user1"]\n    test_user2 = test_environment["dynamic_values"]["test_user2"]\n\n    # Test application functionality\n    assert context_id is not None\n    assert member_key is not None\n    assert test_user1 is not None\n    assert test_user2 is not None\n\n    # Add your test logic here\n    print(f"Testing with context: {context_id}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-3-cicd-integration",children:"Example 3: CI/CD Integration"}),"\n",(0,r.jsx)(n.p,{children:"Integrate Merobox with CI/CD pipelines."}),"\n",(0,r.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test with Merobox\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install merobox\n\n      - name: Run tests\n        run: |\n          pytest tests/ -v --cov=my_app\n\n      - name: Run integration tests\n        run: |\n          pytest tests/integration/ -v\n\n      - name: Run performance tests\n        run: |\n          pytest tests/performance/ -v -m performance\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .gitlab-ci.yml\nstages:\n  - test\n  - integration\n  - performance\n\ntest:\n  stage: test\n  image: python:3.9\n  script:\n    - pip install -r requirements.txt\n    - pip install merobox\n    - pytest tests/ -v\n\nintegration:\n  stage: integration\n  image: python:3.9\n  script:\n    - pip install -r requirements.txt\n    - pip install merobox\n    - pytest tests/integration/ -v\n\nperformance:\n  stage: performance\n  image: python:3.9\n  script:\n    - pip install -r requirements.txt\n    - pip install merobox\n    - pytest tests/performance/ -v\n"})}),"\n",(0,r.jsx)(n.h3,{id:"jenkins-pipeline",children:"Jenkins Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-groovy",children:"// Jenkinsfile\npipeline {\n    agent any\n\n    stages {\n        stage('Test') {\n            steps {\n                sh 'pip install -r requirements.txt'\n                sh 'pip install merobox'\n                sh 'pytest tests/ -v'\n            }\n        }\n\n        stage('Integration Test') {\n            steps {\n                sh 'pytest tests/integration/ -v'\n            }\n        }\n\n        stage('Performance Test') {\n            steps {\n                sh 'pytest tests/performance/ -v'\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-4-parallel-test-execution",children:"Example 4: Parallel Test Execution"}),"\n",(0,r.jsx)(n.p,{children:"Run tests in parallel for faster execution."}),"\n",(0,r.jsx)(n.h3,{id:"parallel-test-configuration",children:"Parallel Test Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# conftest.py\nimport pytest\nfrom merobox.testing import cluster\n\n@pytest.fixture(scope="session")\ndef shared_cluster():\n    """Shared cluster for parallel tests."""\n    with cluster(count=5, prefix="shared") as env:\n        yield env\n\n# Mark tests for parallel execution\npytestmark = pytest.mark.parallel\n\ndef test_parallel_1(shared_cluster):\n    """First parallel test."""\n    # Test logic here\n    pass\n\ndef test_parallel_2(shared_cluster):\n    """Second parallel test."""\n    # Test logic here\n    pass\n\ndef test_parallel_3(shared_cluster):\n    """Third parallel test."""\n    # Test logic here\n    pass\n'})}),"\n",(0,r.jsx)(n.h3,{id:"running-parallel-tests",children:"Running Parallel Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run tests in parallel\npytest -n 4 tests/  # Use 4 workers\n\n# Run specific parallel tests\npytest -n 4 -m parallel tests/\n\n# Run with specific cluster configuration\npytest -n 4 --cluster-count=3 tests/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-5-test-data-management",children:"Example 5: Test Data Management"}),"\n",(0,r.jsx)(n.p,{children:"Manage test data effectively across tests."}),"\n",(0,r.jsx)(n.h3,{id:"test-data-fixtures",children:"Test Data Fixtures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_data.py\nimport pytest\nfrom merobox.testing import cluster\n\n@pytest.fixture\ndef test_data():\n    """Provide test data for tests."""\n    return {\n        "users": [\n            {"id": 1, "name": "Alice", "role": "admin"},\n            {"id": 2, "name": "Bob", "role": "user"},\n            {"id": 3, "name": "Charlie", "role": "user"}\n        ],\n        "config": {\n            "timeout": 30,\n            "retries": 3,\n            "debug": True\n        },\n        "test_cases": [\n            {"input": "test1", "expected": "result1"},\n            {"input": "test2", "expected": "result2"},\n            {"input": "test3", "expected": "result3"}\n        ]\n    }\n\n@pytest.fixture\ndef test_cluster_with_data(test_data):\n    """Cluster with pre-loaded test data."""\n    with cluster(count=2, prefix="data") as env:\n        # Load test data into cluster\n        for user in test_data["users"]:\n            # Load user data\n            pass\n        yield env\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-test-data-generation",children:"Dynamic Test Data Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_dynamic_data.py\nimport pytest\nimport random\nfrom merobox.testing import cluster\n\n@pytest.fixture\ndef random_test_data():\n    """Generate random test data."""\n    return {\n        "random_string": f"test_{random.randint(1000, 9999)}",\n        "random_number": random.randint(1, 100),\n        "random_list": [random.randint(1, 10) for _ in range(5)]\n    }\n\ndef test_with_random_data(random_test_data):\n    """Test with randomly generated data."""\n    assert random_test_data["random_string"].startswith("test_")\n    assert 1 <= random_test_data["random_number"] <= 100\n    assert len(random_test_data["random_list"]) == 5\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-6-test-reporting-and-coverage",children:"Example 6: Test Reporting and Coverage"}),"\n",(0,r.jsx)(n.p,{children:"Generate comprehensive test reports and coverage."}),"\n",(0,r.jsx)(n.h3,{id:"coverage-configuration",children:"Coverage Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# pytest.ini\n[tool:pytest]\naddopts = --cov=my_app --cov-report=html --cov-report=xml\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    performance: marks tests as performance tests\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test-reporting",children:"Test Reporting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_reporting.py\nimport pytest\nfrom merobox.testing import cluster\n\n@pytest.fixture(autouse=True)\ndef test_reporting():\n    """Generate test reports."""\n    yield\n    # Generate custom reports\n    print("Test completed - generating reports...")\n\ndef test_with_reporting():\n    """Test that generates reports."""\n    with cluster(count=2, prefix="report") as env:\n        # Test logic here\n        pass\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-for-testing-integration",children:"Best Practices for Testing Integration"}),"\n",(0,r.jsx)(n.h3,{id:"1-test-isolation",children:"1. Test Isolation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Use separate prefixes for different tests\n@pytest.fixture\ndef isolated_test():\n    with cluster(count=1, prefix="isolated") as env:\n        yield env\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-resource-cleanup",children:"2. Resource Cleanup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Always clean up resources\n@pytest.fixture\ndef clean_test():\n    with cluster(count=2, prefix="clean") as env:\n        try:\n            yield env\n        finally:\n            # Cleanup logic\n            pass\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Handle test failures gracefully\ndef test_with_error_handling():\n    try:\n        with cluster(count=1, prefix="error") as env:\n            # Test logic\n            pass\n    except Exception as e:\n        pytest.fail(f"Test failed: {e}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-performance-monitoring",children:"4. Performance Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Monitor test performance\nimport time\n\ndef test_with_performance_monitoring():\n    start_time = time.time()\n\n    with cluster(count=2, prefix="perf") as env:\n        # Test logic\n        pass\n\n    end_time = time.time()\n    duration = end_time - start_time\n\n    # Assert performance requirements\n    assert duration < 30.0  # Should complete within 30 seconds\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand testing integration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./advanced-examples",children:"Advanced Examples"})," - Complex workflows and advanced\nfeatures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},48854:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(30758);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);