"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[931],{83545:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(30758);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},92534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"developer-tools/merobox/testing-framework-integration","title":"Testing Framework Integration","description":"Basic testing configuration and integration with Python testing frameworks.","source":"@site/docs/05-developer-tools/merobox/testing-framework-integration.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/testing-framework-integration","permalink":"/developer-tools/merobox/testing-framework-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/testing-framework-integration.mdx","tags":[],"version":"current","lastUpdatedAt":1759330694000,"sidebarPosition":7.6,"frontMatter":{"title":"Testing Framework Integration","description":"Basic testing configuration and integration with Python testing frameworks.","sidebar_position":7.6},"sidebar":"tutorialSidebar","previous":{"title":"Workflow Advanced Features","permalink":"/developer-tools/merobox/workflow-advanced-features"},"next":{"title":"Resource Management","permalink":"/developer-tools/merobox/resource-management"}}');var r=t(86070),o=t(83545);const i={title:"Testing Framework Integration",description:"Basic testing configuration and integration with Python testing frameworks.",sidebar_position:7.6},l="Testing Framework Integration",a={},u=[{value:"Basic Testing Setup",id:"basic-testing-setup",level:2},{value:"Basic Testing Setup",id:"basic-testing-setup-1",level:3},{value:"Basic Test Examples",id:"basic-test-examples",level:3},{value:"Test Helper Classes",id:"test-helper-classes",level:2},{value:"Basic Test Helper",id:"basic-test-helper",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Resource Cleanup",id:"resource-cleanup",level:3},{value:"Test Isolation",id:"test-isolation",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Basic Test Execution",id:"basic-test-execution",level:3},{value:"Continuous Integration",id:"continuous-integration",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing-framework-integration",children:"Testing Framework Integration"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers basic testing configuration for Merobox and integration with\nPython testing frameworks."}),"\n",(0,r.jsx)(n.h2,{id:"basic-testing-setup",children:"Basic Testing Setup"}),"\n",(0,r.jsx)(n.p,{children:"Configure Merobox for testing scenarios:"}),"\n",(0,r.jsx)(n.h3,{id:"basic-testing-setup-1",children:"Basic Testing Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# conftest.py\nimport pytest\nimport subprocess\nimport time\n\n@pytest.fixture(scope=\"session\")\ndef merobox_cluster():\n    \"\"\"Basic Merobox cluster for testing.\"\"\"\n    # Start nodes\n    subprocess.run(['merobox', 'run', '--count', '2'])\n    time.sleep(10)  # Wait for nodes to start\n\n    yield\n\n    # Cleanup\n    subprocess.run(['merobox', 'stop', '--all'])\n\n@pytest.fixture(scope=\"function\")\ndef test_environment():\n    \"\"\"Test environment for each test.\"\"\"\n    # Start fresh nodes for each test\n    subprocess.run(['merobox', 'run', '--count', '1'])\n    time.sleep(5)\n\n    yield\n\n    # Cleanup\n    subprocess.run(['merobox', 'stop', '--all'])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"basic-test-examples",children:"Basic Test Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_basic.py\nimport pytest\nimport subprocess\n\ndef test_merobox_health(merobox_cluster):\n    """Test that Merobox nodes are healthy."""\n    result = subprocess.run([\'merobox\', \'health\'], capture_output=True, text=True)\n    assert result.returncode == 0\n    assert "healthy" in result.stdout.lower()\n\ndef test_merobox_list(merobox_cluster):\n    """Test that we can list running nodes."""\n    result = subprocess.run([\'merobox\', \'list\'], capture_output=True, text=True)\n    assert result.returncode == 0\n    assert "calimero-node" in result.stdout\n\ndef test_workflow_execution(test_environment):\n    """Test basic workflow execution."""\n    # Create a simple workflow\n    workflow_content = """\ndescription: Test workflow\nname: Test Workflow\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\nsteps:\n  - name: Test Step\n    type: script\n    script: echo "Hello from test workflow"\nstop_all_nodes: true\n"""\n\n    with open("test_workflow.yml", "w") as f:\n        f.write(workflow_content)\n\n    try:\n        result = subprocess.run(\n            [\'merobox\', \'bootstrap\', \'run\', \'test_workflow.yml\'],\n            capture_output=True,\n            text=True\n        )\n        assert result.returncode == 0\n    finally:\n        import os\n        os.remove("test_workflow.yml")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"test-helper-classes",children:"Test Helper Classes"}),"\n",(0,r.jsx)(n.h3,{id:"basic-test-helper",children:"Basic Test Helper"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# test_helpers.py\nimport subprocess\nimport time\nimport tempfile\nimport os\n\nclass MeroboxTestHelper:\n    def __init__(self):\n        self.nodes = []\n        self.workflow_files = []\n\n    def start_nodes(self, count=2):\n        \"\"\"Start Merobox nodes for testing.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'run', '--count', str(count)],\n            capture_output=True,\n            text=True\n        )\n        if result.returncode == 0:\n            self.nodes = [f\"calimero-node-{i+1}\" for i in range(count)]\n            time.sleep(10)  # Wait for nodes to start\n            return True\n        return False\n\n    def stop_nodes(self):\n        \"\"\"Stop all test nodes.\"\"\"\n        subprocess.run(['merobox', 'stop', '--all'])\n        self.nodes = []\n\n    def check_health(self):\n        \"\"\"Check health of all nodes.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'health'],\n            capture_output=True,\n            text=True\n        )\n        return result.returncode == 0\n\n    def create_workflow(self, workflow_config):\n        \"\"\"Create a temporary workflow file.\"\"\"\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.yml', delete=False) as f:\n            import yaml\n            yaml.dump(workflow_config, f)\n            self.workflow_files.append(f.name)\n            return f.name\n\n    def run_workflow(self, workflow_file):\n        \"\"\"Run a Merobox workflow.\"\"\"\n        result = subprocess.run(\n            ['merobox', 'bootstrap', 'run', workflow_file],\n            capture_output=True,\n            text=True\n        )\n        return result\n\n    def cleanup(self):\n        \"\"\"Clean up all resources.\"\"\"\n        self.stop_nodes()\n        for file in self.workflow_files:\n            if os.path.exists(file):\n                os.unlink(file)\n        self.workflow_files = []\n\n# Usage in tests\n@pytest.fixture\ndef merobox_helper():\n    helper = MeroboxTestHelper()\n    yield helper\n    helper.cleanup()\n\ndef test_with_helper(merobox_helper):\n    \"\"\"Test using the helper class.\"\"\"\n    assert merobox_helper.start_nodes(2)\n    assert merobox_helper.check_health()\n\n    # Create and run a workflow\n    workflow_config = {\n        'description': 'Test workflow',\n        'name': 'Test Workflow',\n        'nodes': {\n            'chain_id': 'testnet-1',\n            'count': 1,\n            'image': 'ghcr.io/calimero-network/merod:edge'\n        },\n        'steps': [\n            {\n                'name': 'Test Step',\n                'type': 'script',\n                'script': 'echo \"Hello from test\"'\n            }\n        ],\n        'stop_all_nodes': True\n    }\n\n    workflow_file = merobox_helper.create_workflow(workflow_config)\n    result = merobox_helper.run_workflow(workflow_file)\n    assert result.returncode == 0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Always handle errors properly\ndef safe_merobox_command(command):\n    """Run Merobox command with proper error handling."""\n    try:\n        result = subprocess.run(\n            [\'merobox\'] + command,\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        print(f"Command failed: {e}")\n        print(f"Error output: {e.stderr}")\n        return None\n    except FileNotFoundError:\n        print("Merobox not found. Please install it first.")\n        return None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-cleanup",children:"Resource Cleanup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Always clean up resources\ndef test_with_cleanup():\n    \"\"\"Test with proper cleanup.\"\"\"\n    try:\n        # Start nodes\n        subprocess.run(['merobox', 'run', '--count', '2'])\n\n        # Run tests\n        result = subprocess.run(['merobox', 'health'])\n        assert result.returncode == 0\n\n    finally:\n        # Always cleanup\n        subprocess.run(['merobox', 'stop', '--all'])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test-isolation",children:"Test Isolation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Use different prefixes for different tests\ndef test_isolated():\n    \"\"\"Test with isolated environment.\"\"\"\n    try:\n        # Start nodes with unique prefix\n        subprocess.run(['merobox', 'run', '--count', '1', '--prefix', 'test-isolated'])\n\n        # Run test\n        result = subprocess.run(['merobox', 'health'])\n        assert result.returncode == 0\n\n    finally:\n        # Cleanup\n        subprocess.run(['merobox', 'stop', '--all'])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,r.jsx)(n.h3,{id:"basic-test-execution",children:"Basic Test Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run all tests\npytest\n\n# Run specific test file\npytest test_merobox.py\n\n# Run with verbose output\npytest -v\n\n# Run with coverage\npytest --cov=my_app\n"})}),"\n",(0,r.jsx)(n.h3,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test with Merobox\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install merobox\n\n      - name: Run tests\n        run: |\n          pytest tests/ -v\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand basic testing integration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./node-management",children:"Node Management"})," - Complete node management guide"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./workflows",children:"Workflows"})," - Workflow system and automation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./environment-variables",children:"Environment Variables"})," - Configuration options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);