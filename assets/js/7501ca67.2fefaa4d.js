"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9939],{52839:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"developer-tools/merobox/workflows","title":"Workflow System","description":"Complete guide to creating and managing Merobox workflows with YAML configuration.","source":"@site/docs/05-developer-tools/merobox/workflows.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/workflows","permalink":"/developer-tools/merobox/workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/workflows.mdx","tags":[],"version":"current","lastUpdatedAt":1759330694000,"sidebarPosition":3,"frontMatter":{"title":"Workflow System","description":"Complete guide to creating and managing Merobox workflows with YAML configuration.","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Node Management","permalink":"/developer-tools/merobox/node-management"},"next":{"title":"Examples and Tutorials","permalink":"/developer-tools/merobox/examples"}}');var o=t(86070),a=t(83545);const l={title:"Workflow System",description:"Complete guide to creating and managing Merobox workflows with YAML configuration.",sidebar_position:3},s="Workflow System",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Workflow Structure",id:"workflow-structure",level:2},{value:"Basic Workflow Format",id:"basic-workflow-format",level:3},{value:"Node Configuration",id:"node-configuration",level:3},{value:"Global Configuration",id:"global-configuration",level:3},{value:"Step Types",id:"step-types",level:2},{value:"Application Management",id:"application-management",level:3},{value:"<code>install_application</code>",id:"install_application",level:4},{value:"<code>create_context</code>",id:"create_context",level:4},{value:"Identity Management",id:"identity-management",level:3},{value:"<code>create_identity</code>",id:"create_identity",level:4},{value:"<code>invite_identity</code>",id:"invite_identity",level:4},{value:"<code>join_context</code>",id:"join_context",level:4},{value:"Contract Execution",id:"contract-execution",level:3},{value:"<code>call</code>",id:"call",level:4},{value:"Control Flow",id:"control-flow",level:3},{value:"<code>wait</code>",id:"wait",level:4},{value:"<code>repeat</code>",id:"repeat",level:4},{value:"<code>script</code>",id:"script",level:4},{value:"Validation and Testing",id:"validation-and-testing",level:3},{value:"<code>assert</code>",id:"assert",level:4},{value:"<code>json_assert</code>",id:"json_assert",level:4},{value:"Dynamic Value Management",id:"dynamic-value-management",level:2},{value:"Variable Capture",id:"variable-capture",level:3},{value:"Variable Resolution",id:"variable-resolution",level:3},{value:"Available Variables",id:"available-variables",level:3},{value:"Workflow Execution",id:"workflow-execution",level:2},{value:"Running Workflows",id:"running-workflows",level:3},{value:"Validating Workflows",id:"validating-workflows",level:3},{value:"Command Reference",id:"command-reference",level:3},{value:"<code>merobox bootstrap run</code>",id:"merobox-bootstrap-run",level:4},{value:"<code>merobox bootstrap validate</code>",id:"merobox-bootstrap-validate",level:4},{value:"<code>merobox bootstrap create-sample</code>",id:"merobox-bootstrap-create-sample",level:4},{value:"Example Workflows",id:"example-workflows",level:2},{value:"Basic Application Deployment",id:"basic-application-deployment",level:3},{value:"Multi-Node Context Sharing",id:"multi-node-context-sharing",level:3},{value:"Testing with Assertions",id:"testing-with-assertions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Workflow Design",id:"workflow-design",level:3},{value:"Variable Management",id:"variable-management",level:3},{value:"Testing Integration",id:"testing-integration",level:3},{value:"Performance",id:"performance",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Variable Resolution Errors",id:"variable-resolution-errors",level:4},{value:"Step Validation Failures",id:"step-validation-failures",level:4},{value:"API Call Failures",id:"api-call-failures",level:4},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"workflow-system",children:"Workflow System"})}),"\n",(0,o.jsx)(n.p,{children:"Merobox's workflow system allows you to define complex, multi-step operations\nusing YAML configuration files. Workflows can orchestrate node management,\napplication deployment, context creation, identity management, and contract\nexecution in a declarative way."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Workflows in Merobox provide:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Declarative Configuration"}),": Define complex operations in simple YAML files"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dynamic Value Management"}),": Capture and reuse values between steps"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Step Orchestration"}),": Chain multiple operations together"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Built-in validation and error reporting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Testing Integration"}),": Perfect for automated testing scenarios"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"workflow-structure",children:"Workflow Structure"}),"\n",(0,o.jsx)(n.h3,{id:"basic-workflow-format",children:"Basic Workflow Format"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: 'Workflow description'\nname: 'Workflow Name'\n\n# Node configuration\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: calimero-node\n\n# Workflow steps\nsteps:\n  - name: 'Step Name'\n    type: step_type\n    # Step-specific parameters\n    outputs:\n      variable_name: field_name\n\n# Global configuration\nstop_all_nodes: false\nrestart: false\nwait_timeout: 60\n"})}),"\n",(0,o.jsx)(n.h3,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Define the Calimero nodes for your workflow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"nodes:\n  chain_id: testnet-1 # Blockchain chain ID\n  count: 2 # Number of nodes to create\n  image: ghcr.io/calimero-network/merod:edge # Docker image\n  prefix: calimero-node # Node name prefix\n  base_port: 2428 # Base P2P port (optional)\n  base_rpc_port: 2528 # Base RPC port (optional)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Control workflow behavior:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Force pull Docker images even if they exist locally\nforce_pull_image: true\n\n# Enable authentication service with Traefik proxy\nauth_service: true\nauth_image: ghcr.io/calimero-network/mero-auth:edge\n\n# Stop all nodes at the end of workflow\nstop_all_nodes: false\n\n# Restart nodes at the beginning of workflow\nrestart: false\n\n# Timeout for waiting operations\nwait_timeout: 60\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-types",children:"Step Types"}),"\n",(0,o.jsx)(n.p,{children:"Merobox supports various step types for different operations:"}),"\n",(0,o.jsx)(n.h3,{id:"application-management",children:"Application Management"}),"\n",(0,o.jsx)(n.h4,{id:"install_application",children:(0,o.jsx)(n.code,{children:"install_application"})}),"\n",(0,o.jsx)(n.p,{children:"Install WASM applications on Calimero nodes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Install Application\n  type: install_application\n  node: calimero-node-1\n  path: ./my-app.wasm # Local file path\n  # OR\n  url: https://example.com/app.wasm # Remote URL\n  dev: true # Development mode\n  outputs:\n    app_id: applicationId # Export application ID\n"})}),"\n",(0,o.jsx)(n.h4,{id:"create_context",children:(0,o.jsx)(n.code,{children:"create_context"})}),"\n",(0,o.jsx)(n.p,{children:"Create blockchain contexts for applications."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Create Context\n  type: create_context\n  node: calimero-node-1\n  application_id: '{{app_id}}' # Use captured value\n  params: # Optional context parameters\n    param1: value1\n  outputs:\n    context_id: contextId\n    member_public_key: memberPublicKey\n"})}),"\n",(0,o.jsx)(n.h3,{id:"identity-management",children:"Identity Management"}),"\n",(0,o.jsx)(n.h4,{id:"create_identity",children:(0,o.jsx)(n.code,{children:"create_identity"})}),"\n",(0,o.jsx)(n.p,{children:"Generate cryptographic identities."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Create Identity\n  type: create_identity\n  node: calimero-node-2\n  outputs:\n    public_key: publicKey\n"})}),"\n",(0,o.jsx)(n.h4,{id:"invite_identity",children:(0,o.jsx)(n.code,{children:"invite_identity"})}),"\n",(0,o.jsx)(n.p,{children:"Invite identities to join contexts."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Invite Identity\n  type: invite_identity\n  node: calimero-node-1\n  context_id: '{{context_id}}'\n  grantee_id: '{{public_key}}'\n  granter_id: '{{member_public_key}}'\n  capability: member\n  outputs:\n    invitation: invitation\n"})}),"\n",(0,o.jsx)(n.h4,{id:"join_context",children:(0,o.jsx)(n.code,{children:"join_context"})}),"\n",(0,o.jsx)(n.p,{children:"Join contexts using invitations."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Join Context\n  type: join_context\n  node: calimero-node-2\n  context_id: '{{context_id}}'\n  invitee_id: '{{public_key}}'\n  invitation: '{{invitation}}'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"contract-execution",children:"Contract Execution"}),"\n",(0,o.jsx)(n.h4,{id:"call",children:(0,o.jsx)(n.code,{children:"call"})}),"\n",(0,o.jsx)(n.p,{children:"Execute smart contract functions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Execute Contract Call\n  type: call\n  node: calimero-node-1\n  context_id: '{{context_id}}'\n  executor_public_key: '{{member_public_key}}'\n  method: set # Contract method name\n  args: # Method arguments\n    key: hello\n    value: world\n  outputs:\n    result: result\n"})}),"\n",(0,o.jsx)(n.h3,{id:"control-flow",children:"Control Flow"}),"\n",(0,o.jsx)(n.h4,{id:"wait",children:(0,o.jsx)(n.code,{children:"wait"})}),"\n",(0,o.jsx)(n.p,{children:"Add delays between steps."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Wait for Propagation\n  type: wait\n  seconds: 5\n"})}),"\n",(0,o.jsx)(n.h4,{id:"repeat",children:(0,o.jsx)(n.code,{children:"repeat"})}),"\n",(0,o.jsx)(n.p,{children:"Execute steps multiple times."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Repeat Operations\n  type: repeat\n  count: 3\n  outputs:\n    current_iteration: iteration\n  steps:\n    - name: Set Value\n      type: call\n      node: calimero-node-1\n      context_id: '{{context_id}}'\n      method: set\n      args:\n        key: 'key_{{current_iteration}}'\n        value: 'value_{{current_iteration}}'\n"})}),"\n",(0,o.jsx)(n.h4,{id:"script",children:(0,o.jsx)(n.code,{children:"script"})}),"\n",(0,o.jsx)(n.p,{children:"Execute custom scripts."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'- name: Run Custom Script\n  type: script\n  script: |\n    echo "Hello from script"\n    echo "Context ID: {{context_id}}"\n  outputs:\n    script_output: output\n'})}),"\n",(0,o.jsx)(n.h3,{id:"validation-and-testing",children:"Validation and Testing"}),"\n",(0,o.jsx)(n.h4,{id:"assert",children:(0,o.jsx)(n.code,{children:"assert"})}),"\n",(0,o.jsx)(n.p,{children:"Validate conditions and outputs."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: Validate Results\n  type: assert\n  statements:\n    - 'is_set({{context_id}})'\n    - \"contains({{result}}, 'expected_value')\"\n    - '{{count}} >= 1'\n    - 'regex({{public_key}}, ^[1-9A-HJ-NP-Za-km-z]+$)'\n"})}),"\n",(0,o.jsx)(n.h4,{id:"json_assert",children:(0,o.jsx)(n.code,{children:"json_assert"})}),"\n",(0,o.jsx)(n.p,{children:"Validate JSON data structures."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'- name: Validate JSON\n  type: json_assert\n  statements:\n    - \'json_equal({{result}}, {"output": "expected"})\'\n    - \'json_subset({{result}}, {"output": "expected"})\'\n'})}),"\n",(0,o.jsx)(n.h2,{id:"dynamic-value-management",children:"Dynamic Value Management"}),"\n",(0,o.jsx)(n.h3,{id:"variable-capture",children:"Variable Capture"}),"\n",(0,o.jsx)(n.p,{children:"Capture values from step outputs for use in subsequent steps:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Install App\n    type: install_application\n    node: calimero-node-1\n    path: ./app.wasm\n    outputs:\n      app_id: applicationId # Capture 'applicationId' as 'app_id'\n\n  - name: Create Context\n    type: create_context\n    node: calimero-node-1\n    application_id: '{{app_id}}' # Use captured value\n    outputs:\n      context_id: contextId\n"})}),"\n",(0,o.jsx)(n.h3,{id:"variable-resolution",children:"Variable Resolution"}),"\n",(0,o.jsxs)(n.p,{children:["Variables are resolved using ",(0,o.jsx)(n.code,{children:"{{variable_name}}"})," syntax:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"args:\n  key: 'user_{{user_id}}_data_{{iteration}}'\n  message: 'Processing {{context_id}} with {{public_key}}'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"available-variables",children:"Available Variables"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Step Outputs"}),": Variables exported by previous steps"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Workflow Context"}),": Global workflow variables"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Environment Variables"}),": System environment variables"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Repeat Iteration"}),": Current iteration number in repeat steps"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"workflow-execution",children:"Workflow Execution"}),"\n",(0,o.jsx)(n.h3,{id:"running-workflows",children:"Running Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Execute workflows using the bootstrap command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run a workflow\nmerobox bootstrap run workflow.yml\n\n# Run with authentication service\nmerobox bootstrap run workflow.yml --auth-service\n\n# Run with custom auth image\nmerobox bootstrap run workflow.yml --auth-service --auth-image ghcr.io/calimero-network/mero-auth:latest\n\n# Run with verbose output\nmerobox bootstrap run workflow.yml --verbose\n"})}),"\n",(0,o.jsx)(n.h3,{id:"validating-workflows",children:"Validating Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Validate workflow configuration before execution:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Validate workflow syntax\nmerobox bootstrap validate workflow.yml\n\n# Create sample workflow\nmerobox bootstrap create-sample\n"})}),"\n",(0,o.jsx)(n.h3,{id:"command-reference",children:"Command Reference"}),"\n",(0,o.jsx)(n.h4,{id:"merobox-bootstrap-run",children:(0,o.jsx)(n.code,{children:"merobox bootstrap run"})}),"\n",(0,o.jsx)(n.p,{children:"Execute a workflow from a YAML file."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"merobox bootstrap run CONFIG_FILE [OPTIONS]\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONFIG_FILE"}),": Path to the workflow YAML file"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Options:"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Option"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--auth-service"})}),(0,o.jsx)(n.td,{children:"Enable authentication service with Traefik proxy"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--auth-image TEXT"})}),(0,o.jsx)(n.td,{children:"Custom Docker image for the auth service"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--verbose, -v"})}),(0,o.jsx)(n.td,{children:"Enable verbose output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--help"})}),(0,o.jsx)(n.td,{children:"Show help message"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"merobox-bootstrap-validate",children:(0,o.jsx)(n.code,{children:"merobox bootstrap validate"})}),"\n",(0,o.jsx)(n.p,{children:"Validate workflow configuration."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"merobox bootstrap validate CONFIG_FILE\n"})}),"\n",(0,o.jsx)(n.h4,{id:"merobox-bootstrap-create-sample",children:(0,o.jsx)(n.code,{children:"merobox bootstrap create-sample"})}),"\n",(0,o.jsx)(n.p,{children:"Create a sample workflow file."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"merobox bootstrap create-sample\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-workflows",children:"Example Workflows"}),"\n",(0,o.jsx)(n.h3,{id:"basic-application-deployment",children:"Basic Application Deployment"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Deploy and test a simple application\nname: Basic App Deployment\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: calimero-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: calimero-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: calimero-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test Application\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test\n    args:\n      input: 'test_data'\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"multi-node-context-sharing",children:"Multi-Node Context Sharing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Create context on one node and join from another\nname: Multi-Node Context Sharing\n\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: calimero-node\n\nsteps:\n  # Install application on first node\n  - name: Install Application\n    type: install_application\n    node: calimero-node-1\n    path: ./shared-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  # Create context on first node\n  - name: Create Context\n    type: create_context\n    node: calimero-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  # Create identity on second node\n  - name: Create Identity\n    type: create_identity\n    node: calimero-node-2\n    outputs:\n      public_key: publicKey\n\n  # Invite second node to context\n  - name: Invite Node\n    type: invite_identity\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    grantee_id: '{{public_key}}'\n    granter_id: '{{member_key}}'\n    capability: member\n    outputs:\n      invitation: invitation\n\n  # Join context from second node\n  - name: Join Context\n    type: join_context\n    node: calimero-node-2\n    context_id: '{{context_id}}'\n    invitee_id: '{{public_key}}'\n    invitation: '{{invitation}}'\n\n  # Test cross-node communication\n  - name: Set Value from Node 1\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: set\n    args:\n      key: shared_data\n      value: 'set from node 1'\n\n  - name: Get Value from Node 2\n    type: call\n    node: calimero-node-2\n    context_id: '{{context_id}}'\n    executor_public_key: '{{public_key}}'\n    method: get\n    args:\n      key: shared_data\n    outputs:\n      result: result\n\n  - name: Validate Cross-Node Communication\n    type: assert\n    statements:\n      - \"contains({{result}}, 'set from node 1')\"\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"testing-with-assertions",children:"Testing with Assertions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"description: Comprehensive testing workflow with assertions\nname: Testing with Assertions\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: calimero-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: calimero-node-1\n    path: ./test-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: calimero-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Set Test Data\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: set\n    args:\n      key: test_key\n      value: test_value\n    outputs:\n      set_result: result\n\n  - name: Get Test Data\n    type: call\n    node: calimero-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: get\n    args:\n      key: test_key\n    outputs:\n      get_result: result\n\n  # Basic assertions\n  - name: Validate Basic Conditions\n    type: assert\n    statements:\n      - 'is_set({{context_id}})'\n      - 'is_set({{member_key}})'\n      - \"{{context_id}} != ''\"\n      - \"contains({{get_result}}, 'test_value')\"\n\n  # JSON assertions\n  - name: Validate JSON Response\n    type: json_assert\n    statements:\n      - 'json_equal({{get_result}}, {\"output\": \"test_value\"})'\n      - 'json_subset({{get_result}}, {\"output\": \"test_value\"})'\n\n  # String operations\n  - name: Validate String Operations\n    type: assert\n    statements:\n      - 'regex({{member_key}}, ^[1-9A-HJ-NP-Za-km-z]+$)'\n      - \"not_contains({{member_key}}, 'invalid')\"\n\nstop_all_nodes: true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"workflow-design",children:"Workflow Design"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Modular Steps"}),": Break complex operations into smaller, focused steps"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clear Naming"}),": Use descriptive names for steps and variables"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Include validation steps to catch issues early"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Documentation"}),": Add descriptions to explain workflow purpose"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"variable-management",children:"Variable Management"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistent Naming"}),": Use consistent naming conventions for variables"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Minimal Scope"}),": Only capture variables you actually need"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clear Mapping"}),": Use descriptive names in outputs sections"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validation"}),": Validate captured values before using them"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"testing-integration",children:"Testing Integration"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Assertions"}),": Include assertions to validate expected outcomes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Edge Cases"}),": Test both success and failure scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cleanup"}),": Use ",(0,o.jsx)(n.code,{children:"stop_all_nodes: true"})," for test workflows"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Isolation"}),": Use unique prefixes for parallel test runs"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Minimal Waits"}),": Use appropriate wait times, not excessive delays"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resource Management"}),": Stop nodes when not needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Image Management"}),": Use ",(0,o.jsx)(n.code,{children:"force_pull_image: true"})," sparingly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parallel Operations"}),": Design workflows to minimize sequential dependencies"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsx)(n.h4,{id:"variable-resolution-errors",children:"Variable Resolution Errors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Error: Variable '{{missing_var}}' not found\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Check variable names for typos"}),"\n",(0,o.jsx)(n.li,{children:"Ensure previous steps export the required variables"}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"merobox bootstrap validate"})," to check configuration"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"step-validation-failures",children:"Step Validation Failures"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Error: Required field 'node' missing\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Validate workflow: ",(0,o.jsx)(n.code,{children:"merobox bootstrap validate workflow.yml"})]}),"\n",(0,o.jsx)(n.li,{children:"Check step configuration and required fields"}),"\n",(0,o.jsx)(n.li,{children:"Verify field types and values"}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"api-call-failures",children:"API Call Failures"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Error: API request failed\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Check node health: ",(0,o.jsx)(n.code,{children:"merobox health"})]}),"\n",(0,o.jsx)(n.li,{children:"Verify nodes are ready before making API calls"}),"\n",(0,o.jsx)(n.li,{children:"Check network connectivity and port availability"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Validate workflow before running\nmerobox bootstrap validate workflow.yml\n\n# Run with verbose output\nmerobox bootstrap run workflow.yml --verbose\n\n# Check node status\nmerobox health --verbose\n\n# View node logs\nmerobox logs calimero-node-1\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Now that you understand workflows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./examples",children:"Examples and Tutorials"})," - Practical examples and tutorials"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./advanced-configuration",children:"Advanced Configuration"})," - Advanced setup options"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./python-customization",children:"Python Customization"})," - Advanced Python customization\nand extensions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},83545:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(30758);const o={},a=i.createContext(o);function l(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);