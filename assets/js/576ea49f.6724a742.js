"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8334],{68820:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(30758);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},69127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"developer-tools/merobox/advanced-examples","title":"Advanced Examples","description":"Complex workflows and advanced features for power users.","source":"@site/docs/05-developer-tools/merobox/advanced-examples.mdx","sourceDirName":"05-developer-tools/merobox","slug":"/developer-tools/merobox/advanced-examples","permalink":"/developer-tools/merobox/advanced-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/calimero-network/calimero-network.github.io/edit/master/docs/05-developer-tools/merobox/advanced-examples.mdx","tags":[],"version":"current","lastUpdatedAt":1759836146000,"sidebarPosition":4.4,"frontMatter":{"title":"Advanced Examples","description":"Complex workflows and advanced features for power users.","sidebar_position":4.4},"sidebar":"tutorialSidebar","previous":{"title":"Testing Integration Examples","permalink":"/developer-tools/merobox/testing-integration-examples"},"next":{"title":"Best Practices","permalink":"/developer-tools/merobox/best-practices"}}');var a=t(86070),i=t(68820);const r={title:"Advanced Examples",description:"Complex workflows and advanced features for power users.",sidebar_position:4.4},s="Advanced Examples",l={},p=[{value:"Example 1: Custom Script Integration",id:"example-1-custom-script-integration",level:2},{value:"Example 2: Error Handling and Recovery",id:"example-2-error-handling-and-recovery",level:2},{value:"Example 3: Conditional Workflow Execution",id:"example-3-conditional-workflow-execution",level:2},{value:"Example 4: Parallel Processing",id:"example-4-parallel-processing",level:2},{value:"Example 5: Dynamic Workflow Generation",id:"example-5-dynamic-workflow-generation",level:2},{value:"Example 6: Workflow Composition",id:"example-6-workflow-composition",level:2},{value:"Best Practices for Advanced Examples",id:"best-practices-for-advanced-examples",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Performance Optimization",id:"2-performance-optimization",level:3},{value:"3. Resource Management",id:"3-resource-management",level:3},{value:"4. Monitoring and Validation",id:"4-monitoring-and-validation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"advanced-examples",children:"Advanced Examples"})}),"\n",(0,a.jsx)(n.p,{children:"These examples demonstrate complex workflows and advanced features for power\nusers who need sophisticated Merobox capabilities."}),"\n",(0,a.jsxs)(n.admonition,{title:"Available Step Types For a complete reference of all available step",type:"info",children:[(0,a.jsxs)(n.p,{children:["types and their configuration options, see the\n",(0,a.jsx)(n.a,{href:"./workflows#step-types",children:"Workflow System documentation"}),". The following step\ntypes are supported:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"install_application"})})," - Install WASM applications on nodes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"create_context"})})," - Create blockchain contexts for applications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"create_identity"})})," - Generate cryptographic identities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"invite_identity"})})," - Invite identities to join contexts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"join_context"})})," - Join contexts using invitations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"call"})})," - Execute smart contract functions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"wait"})})," - Add delays between steps"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"repeat"})})," - Execute steps multiple times"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"script"})})," - Execute custom scripts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"assert"})})," - Validate conditions and outputs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"json_assert"})})," - Validate JSON data structures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"parallel"})})," - Execute multiple steps in parallel"]}),"\n"]}),(0,a.jsxs)(n.p,{children:["Each step type has specific configuration parameters and output options. Refer\nto the ",(0,a.jsx)(n.a,{href:"./workflows#step-types",children:"Workflow System documentation"})," for detailed\nexamples and configuration options. :::"]}),(0,a.jsx)(n.h2,{id:"example-1-custom-script-integration",children:"Example 1: Custom Script Integration"}),(0,a.jsx)(n.p,{children:"Use custom scripts for complex setup and validation."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'description: Custom script integration example\nname: Script Integration\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: script-node\n\nsteps:\n  - name: Pre-Setup Script\n    type: script\n    script: |\n      echo "Setting up test environment..."\n      mkdir -p /tmp/test-data\n      echo "test_data" > /tmp/test-data/sample.txt\n      echo "Pre-setup complete"\n\n  - name: Install Application\n    type: install_application\n    node: script-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Post-Installation Script\n    type: script\n    script: |\n      echo "Application installed: {{app_id}}"\n      echo "Verifying installation..."\n      # Add custom verification logic here\n      echo "Installation verified"\n\n  - name: Custom Validation\n    type: script\n    script: |\n      echo "Running custom validation..."\n      # Add custom validation logic here\n      echo "Validation complete"\n\nstop_all_nodes: true\n'})}),(0,a.jsx)(n.h2,{id:"example-2-error-handling-and-recovery",children:"Example 2: Error Handling and Recovery"}),(0,a.jsx)(n.p,{children:"Implement robust error handling in your workflows."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Error handling example\nname: Error Handling\n\nnodes:\n  chain_id: testnet-1\n  count: 1\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: error-node\n\nsteps:\n  - name: Install Application\n    type: install_application\n    node: error-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: error-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  - name: Test Error Handling\n    type: call\n    node: error-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test_error_handling\n    args:\n      should_fail: true\n    outputs:\n      error_result: result\n\n  - name: Validate Error Response\n    type: assert\n    statements:\n      - \"contains({{error_result}}, 'error')\"\n\n  - name: Recovery Test\n    type: call\n    node: error-node-1\n    context_id: '{{context_id}}'\n    executor_public_key: '{{member_key}}'\n    method: test_recovery\n    args:\n      should_succeed: true\n    outputs:\n      recovery_result: result\n\n  - name: Validate Recovery\n    type: assert\n    statements:\n      - \"contains({{recovery_result}}, 'success')\"\n\nstop_all_nodes: true\n"})}),(0,a.jsx)(n.h2,{id:"example-3-conditional-workflow-execution",children:"Example 3: Conditional Workflow Execution"}),(0,a.jsx)(n.p,{children:"Execute different workflow paths based on conditions."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'description: Conditional workflow execution\nname: Conditional Workflow\n\nnodes:\n  chain_id: testnet-1\n  count: 2\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: conditional-node\n\nsteps:\n  - name: Check Environment\n    type: script\n    script: |\n      if [ "$ENVIRONMENT" = "production" ]; then\n        echo "production" > /tmp/env_type\n        echo "true" > /tmp/use_ssl\n      elif [ "$ENVIRONMENT" = "staging" ]; then\n        echo "staging" > /tmp/env_type\n        echo "true" > /tmp/use_ssl\n      else\n        echo "development" > /tmp/env_type\n        echo "false" > /tmp/use_ssl\n      fi\n    outputs:\n      env_type: output\n      use_ssl: output\n\n  - name: Production Setup\n    type: script\n    condition: "{{env_type}} == \'production\'"\n    script: |\n      echo "Setting up production environment..."\n      # Production-specific setup\n      echo "Production setup complete"\n\n  - name: Staging Setup\n    type: script\n    condition: "{{env_type}} == \'staging\'"\n    script: |\n      echo "Setting up staging environment..."\n      # Staging-specific setup\n      echo "Staging setup complete"\n\n  - name: Development Setup\n    type: script\n    condition: "{{env_type}} == \'development\'"\n    script: |\n      echo "Setting up development environment..."\n      # Development-specific setup\n      echo "Development setup complete"\n\n  - name: SSL Configuration\n    type: script\n    condition: "{{use_ssl}} == \'true\'"\n    script: |\n      echo "Configuring SSL for {{env_type}} environment..."\n      # SSL configuration logic\n      echo "SSL configuration complete"\n\nstop_all_nodes: true\n'})}),(0,a.jsx)(n.h2,{id:"example-4-parallel-processing",children:"Example 4: Parallel Processing"}),(0,a.jsx)(n.p,{children:"Execute multiple operations in parallel for improved performance."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Parallel processing example\nname: Parallel Processing\n\nnodes:\n  chain_id: testnet-1\n  count: 5\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: parallel-node\n\nsteps:\n  - name: Install Applications in Parallel\n    type: parallel\n    max_concurrent: 3\n    steps:\n      - name: Install App 1\n        type: install_application\n        node: parallel-node-1\n        path: ./app1.wasm\n        dev: true\n        outputs:\n          app_id_1: applicationId\n\n      - name: Install App 2\n        type: install_application\n        node: parallel-node-2\n        path: ./app2.wasm\n        dev: true\n        outputs:\n          app_id_2: applicationId\n\n      - name: Install App 3\n        type: install_application\n        node: parallel-node-3\n        path: ./app3.wasm\n        dev: true\n        outputs:\n          app_id_3: applicationId\n\n  - name: Create Contexts in Parallel\n    type: parallel\n    steps:\n      - name: Create Context 1\n        type: create_context\n        node: parallel-node-1\n        application_id: '{{app_id_1}}'\n        outputs:\n          context_id_1: contextId\n          member_key_1: memberPublicKey\n\n      - name: Create Context 2\n        type: create_context\n        node: parallel-node-2\n        application_id: '{{app_id_2}}'\n        outputs:\n          context_id_2: contextId\n          member_key_2: memberPublicKey\n\n      - name: Create Context 3\n        type: create_context\n        node: parallel-node-3\n        application_id: '{{app_id_3}}'\n        outputs:\n          context_id_3: contextId\n          member_key_3: memberPublicKey\n\n  - name: Test All Applications\n    type: parallel\n    steps:\n      - name: Test App 1\n        type: call\n        node: parallel-node-1\n        context_id: '{{context_id_1}}'\n        executor_public_key: '{{member_key_1}}'\n        method: test_functionality\n        args:\n          test_data: 'app1_test'\n\n      - name: Test App 2\n        type: call\n        node: parallel-node-2\n        context_id: '{{context_id_2}}'\n        executor_public_key: '{{member_key_2}}'\n        method: test_functionality\n        args:\n          test_data: 'app2_test'\n\n      - name: Test App 3\n        type: call\n        node: parallel-node-3\n        context_id: '{{context_id_3}}'\n        executor_public_key: '{{member_key_3}}'\n        method: test_functionality\n        args:\n          test_data: 'app3_test'\n\nstop_all_nodes: true\n"})}),(0,a.jsx)(n.h2,{id:"example-5-dynamic-workflow-generation",children:"Example 5: Dynamic Workflow Generation"}),(0,a.jsx)(n.p,{children:"Generate workflows dynamically based on configuration."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'description: Dynamic workflow generation\nname: Dynamic Workflow\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: dynamic-node\n\nsteps:\n  - name: Generate Workflow Configuration\n    type: script\n    script: |\n      # Generate dynamic configuration\n      echo "Generating workflow configuration..."\n\n      # Create configuration file\n      cat > /tmp/workflow_config.json << EOF\n      {\n        "applications": [\n          {"name": "app1", "path": "./app1.wasm"},\n          {"name": "app2", "path": "./app2.wasm"},\n          {"name": "app3", "path": "./app3.wasm"}\n        ],\n        "test_cases": [\n          {"name": "test1", "method": "test_method1"},\n          {"name": "test2", "method": "test_method2"},\n          {"name": "test3", "method": "test_method3"}\n        ]\n      }\n      EOF\n\n      echo "Configuration generated"\n    outputs:\n      config_file: \'/tmp/workflow_config.json\'\n\n  - name: Install Applications Dynamically\n    type: repeat\n    count: 3\n    outputs:\n      iteration: iteration\n    steps:\n      - name: Install Application {{iteration}}\n        type: install_application\n        node: dynamic-node-{{iteration}}\n        path: ./app{{iteration}}.wasm\n        dev: true\n        outputs:\n          app_id: applicationId\n\n  - name: Create Contexts Dynamically\n    type: repeat\n    count: 3\n    outputs:\n      iteration: iteration\n    steps:\n      - name: Create Context {{iteration}}\n        type: create_context\n        node: dynamic-node-{{iteration}}\n        application_id: \'{{app_id}}\'\n        outputs:\n          context_id: contextId\n          member_key: memberPublicKey\n\n  - name: Run Tests Dynamically\n    type: repeat\n    count: 3\n    outputs:\n      iteration: iteration\n    steps:\n      - name: Run Test {{iteration}}\n        type: call\n        node: dynamic-node-{{iteration}}\n        context_id: \'{{context_id}}\'\n        executor_public_key: \'{{member_key}}\'\n        method: test_method{{iteration}}\n        args:\n          test_data: \'test_{{iteration}}\'\n\nstop_all_nodes: true\n'})}),(0,a.jsx)(n.h2,{id:"example-6-workflow-composition",children:"Example 6: Workflow Composition"}),(0,a.jsx)(n.p,{children:"Compose complex workflows from smaller, reusable components."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"description: Workflow composition example\nname: Workflow Composition\n\nnodes:\n  chain_id: testnet-1\n  count: 3\n  image: ghcr.io/calimero-network/merod:edge\n  prefix: compose-node\n\nsteps:\n  # Common setup steps\n  - name: Common Setup\n    type: script\n    script: |\n      echo \"Common setup logic\"\n      # Common setup steps\n\n  # Application-specific steps\n  - name: Install Application\n    type: install_application\n    node: compose-node-1\n    path: ./my-app.wasm\n    dev: true\n    outputs:\n      app_id: applicationId\n\n  - name: Create Context\n    type: create_context\n    node: compose-node-1\n    application_id: '{{app_id}}'\n    outputs:\n      context_id: contextId\n      member_key: memberPublicKey\n\n  # Testing steps\n  - name: Run Tests\n    type: parallel\n    steps:\n      - name: Test 1\n        type: call\n        node: compose-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: test1\n\n      - name: Test 2\n        type: call\n        node: compose-node-1\n        context_id: '{{context_id}}'\n        executor_public_key: '{{member_key}}'\n        method: test2\n\n  # Common cleanup steps\n  - name: Common Cleanup\n    type: script\n    script: |\n      echo \"Common cleanup logic\"\n      # Common cleanup steps\n\nstop_all_nodes: true\n"})}),(0,a.jsx)(n.h2,{id:"best-practices-for-advanced-examples",children:"Best Practices for Advanced Examples"}),(0,a.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# Always include comprehensive error handling\nsteps:\n  - name: Risky Operation\n    type: call\n    node: calimero-node-1\n    method: risky_method\n    retry:\n      attempts: 3\n      delay: 5\n      backoff: exponential\n    on_error:\n      - name: Log Error\n        type: script\n        script: echo "Operation failed: {{error}}"\n      - name: Cleanup\n        type: script\n        script: echo "Cleaning up..."\n'})}),(0,a.jsx)(n.h3,{id:"2-performance-optimization",children:"2. Performance Optimization"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Use parallel execution where possible\nsteps:\n  - name: Parallel Operations\n    type: parallel\n    max_concurrent: 3\n    steps:\n      - name: Operation 1\n        type: call\n        # ... operation details\n      - name: Operation 2\n        type: call\n        # ... operation details\n"})}),(0,a.jsx)(n.h3,{id:"3-resource-management",children:"3. Resource Management"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Set appropriate resource limits\nnodes:\n  count: 3 # Scale based on needs\n"})}),(0,a.jsx)(n.h3,{id:"4-monitoring-and-validation",children:"4. Monitoring and Validation"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Always validate results\nsteps:\n  - name: Validate Results\n    type: assert\n    statements:\n      - '{{result}} != null'\n      - \"contains({{result}}, 'expected_value')\"\n"})}),(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),(0,a.jsx)(n.p,{children:"Now that you understand advanced examples:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./best-practices",children:"Best Practices"})," - Guidelines for effective Merobox usage"]}),"\n"]})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);